<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>제 13 장 : 클래스와 함수(Classes and functions)</title>
<META http-equiv=Content-Type content="text/html; charset=utf-8">

<style type="text/css">
<!--
body {background-color: white; color: black;}
a {background-color: white; color: blue; text-decoration: underline;}
a:hover {text-decoration: none;}
td.head,td.headcenter {background-color: #99ccff; color: black;}
td.headcenter {width: 100%; text-align: center;}
img {border-style: none;}
-->
</style>


<style type="text/css">
<!--
.code {font-family: Courier; font-size: 85%;}
.keyword {color: #0000ff;}
.comment {color: #008000;}
.quote {color: #ff0000;}
.function {color: #0000ff;}
-->
</style>

</head>

<body>

<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap14.htm"><img border="0" alt="Next" src="images/next.png"></a></td>
    <td width="20" class=head><a href="index.htm"><img border="0" alt="Up" src="images/up.png"></a></td>
    <td width="20" class=head><a href="chap12.htm"><img border="0" alt="Previous" src="images/prev.png"></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png"></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
    <td width="20" class=head><a href="dex.htm"><img border="0" alt="Index" src="images/index.png"></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
  </tr>
</table>
<hr>


<h2>제 13 장</h2>

<h1>클래스와 함수</h1>


<a name=1></a><br>
<h3>13.1 시간</h3>

<p>
사용자-정의 유형의 또 다른 예로서, <span class=code>Time</span>이라고 부르는 클래스 하나를 정의해 하루의 시간을 기록하여 보겠습니다. 클래스 정의는 다음과 같이 보입니다:</p>


<p><span class=code><span class=keyword>class</span> Time:
<br>&nbsp; <span class=keyword>pass</span>
<br></span></p>



<p>
<span class=code>Time</span> 객체 하나를 새로 만들고 시와 분 그리고 초에 대한 속성들을 할당합니다:</p>


<p><span class=code>time = Time()
<br>time.hours = 11
<br>time.minutes = 59
<br>time.seconds = 30
<br></span></p>



<p>
<span class=code>Time</span> 객체에 대한 상태 다이어그램은 다음과 같이 보입니다:</p>

<p align="center"><img src="illustrations/time.png"></p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, <span class=code>printTime</span> 함수를 작성하여 <span class=code>Time</span> 객체를 인자로 취하고 그 객체를 <span class=code>hours:minutes:seconds</span>의 형태로 인쇄해 보세요.</i> </p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>두 번째 연습문제로, 불리언 함수 <span class=code>after</span>를 작성하여 <span class=code>Time</span> 객체 <span class=code>t1</span>과 <span class=code>t2</span>를 인자로 취해 만약 시간상으로 <span class=code>t1</span>이 <span class=code>t2</span>보다 뒤에 온다면 참(1)을 반환하고 그렇지 않으면 거짓(0)을 반환하도록 해 보세요.</i> </p>

<a name=2></a><br>
<h3>13.2 순수한 함수</h3>

<p>
다음 몇 섹션에서는 <span class=code>addTime</span>이라고 부르는 함수를 두 개의 버전으로 작성하겠습니다. <span class=code>addTime</span> 함수는 <span class=code>Time</span> 두 개의 합을 계산합니다. 두 버전은 각각 두 가지 종류의 함수를 예시하여 보여줄 것입니다: 순수한 함수와 변경자가 그것입니다.</p>
<p>
다음은 대략적으로 작성된 <span class=code>addTime</span> 버전입니다:</p>

<p><span class=code><span class=keyword>def</span> <span class=function>addTime</span>(t1, t2):
<br>&nbsp; sum = Time()
<br>&nbsp; sum.hours = t1.hours + t2.hours
<br>&nbsp; sum.minutes = t1.minutes + t2.minutes
<br>&nbsp; sum.seconds = t1.seconds + t2.seconds
<br>&nbsp; <span class=keyword>return</span> sum
<br></span></p>
<p>
이 함수는 <span class=code>Time</span> 객체 하나를 새로 만들고 그의 속성들을 초기화하며 그리고 새로 생성된 객체에 대한 참조점을 돌려줍니다. 이런 함수를 일컬어 <b>순수한 함수(pure function)</b>라고 부르는데 왜냐하면 매개변수로 건네지는 어떠한 객체도 변경하지 않으며 값을 화면에 표시한다든가 또는 사용자 입력을 얻는다든가 하는 다른 작용을 전혀 하지 않기 때문입니다.</p>
<p>
다음은 이 함수를 사용하는 법을 보여줍니다. <span class=code>Time</span> 객체 두 개를 만들겠습니다: 하나는 <span class=code>currentTime</span>으로 현재 시간을 담고 있습니다; 그리고 다른 하나는 <span class=code>breadTime</span>으로 제빵사가 빵을 굽는데 걸린 시간을 담고 있습니다. 그리고 나서 <span class=code>addTime</span>을 사용하여 언제 빵이 완성될지를 알아낼 것입니다. 아직 <span class=code>printTime</span> 함수를 작성하지 못했다면, 다음 코드를 시도하기 전에 먼저 <a href="chap14.htm#2">섹션 14.2</a>를 살펴 보세요:</p>


<p><span class=code>&gt;&gt;&gt; currentTime = Time()
<br>&gt;&gt;&gt; currentTime.hours = 9
<br>&gt;&gt;&gt; currentTime.minutes = 14
<br>&gt;&gt;&gt; currentTime.seconds =&nbsp; 30
<br>
<br>&gt;&gt;&gt; breadTime = Time()
<br>&gt;&gt;&gt; breadTime.hours =&nbsp; 3
<br>&gt;&gt;&gt; breadTime.minutes =&nbsp; 35
<br>&gt;&gt;&gt; breadTime.seconds =&nbsp; 0
<br>
<br>&gt;&gt;&gt; doneTime = addTime(currentTime, breadTime)
<br>&gt;&gt;&gt; printTime(doneTime)
<br></span></p>
<p>
이 프로그램의 출력결과는 <span class=code>12:49:30</span>이고 옳은 답입니다. 반면에, 그 결과가 옳지 않은 경우가 있습니다. 어떤 것이 있는지 그 중에 하나를 짐작할 수 있나요?</p>
<p>
문제는 이 함수가 초나 분의 숫자가 60을 초과해서 증가하는 경우를 다루지 못한다는 것입니다. 그런 경우가 발생하면 꽉 채워진 초를 분의 자리로 "이동(carry)"시키거나 또는 다 채워진 분을 시간의 자리로 "이동(carry)"시켜야 합니다.</p>
<p>
다음은 이 함수를 수정한 두 번째 버전입니다:</p>
<p>
<span class=code><span class=keyword>def</span> <span class=function>addTime</span>(t1, t2):
<br>&nbsp; sum = Time()
<br>&nbsp; sum.hours = t1.hours + t2.hours
<br>&nbsp; sum.minutes = t1.minutes + t2.minutes
<br>&nbsp; sum.seconds = t1.seconds + t2.seconds
<br>
<br>&nbsp; <span class=keyword>if</span> sum.seconds &gt;= 60:
<br>&nbsp; &nbsp; sum.seconds = sum.seconds - 60
<br>&nbsp; &nbsp; sum.minutes = sum.minutes + 1
<br>
<br>&nbsp; <span class=keyword>if</span> sum.minutes &gt;= 60:
<br>&nbsp; &nbsp; sum.minutes = sum.minutes - 60
<br>&nbsp; &nbsp; sum.hours = sum.hours + 1
<br>
<br>&nbsp; <span class=keyword>return</span> sum
<br></span></p>
<p>
이 함수는 옳기는 하지만 코드가 커지기 시작합니다. 나중에 더 짧은 코드를 만들어 내는 대안을 제시하겠습니다</p>

<a name=3></a><br>
<h3>13.3 변경자(Modifiers)</h3>

<p>
가끔은 함수가 매개변수로 받아들이는 객체들 중의 하나 이상을 변경하는 것이 유용할 때가 있습니다. 보통, 호출자는 건네주는 객체들에 대한 참조점을 유지하고 있습니다. 그래서 그 함수가 어떤 변경을 해도 호출자가 모두 볼 수 있습니다. 이런식으로 작동하는 함수를 <b>변경자(modifiers)</b>라고 부릅니다..</p>
<p>
<span class=code>increment</span>는 초를 주어진 개수만큼 <span class=code>Time</span> 객체에 더하기 때문에 아주 자연스럽게 변경자로 작성될 수 있을 것입니다. 함수를 대충 작성해 보면 다음과 같이 보입니다:</p>
<p>
<span class=code><span class=keyword>def</span> <span class=function>increment</span>(time, seconds):
<br>&nbsp; time.seconds = time.seconds + seconds
<br>
<br>&nbsp; <span class=keyword>if</span> time.seconds &gt;= 60:
<br>&nbsp; &nbsp; time.seconds = time.seconds - 60
<br>&nbsp; &nbsp; time.minutes = time.minutes + 1
<br>
<br>&nbsp; <span class=keyword>if</span> time.minutes &gt;= 60:
<br>&nbsp; &nbsp; time.minutes = time.minutes - 60
<br>&nbsp; &nbsp; time.hours = time.hours + 1
<br></span></p>



<p>
첫 번째 줄은 기본 연산을 수행합니다; 나머지는 이전에 본 특수한 경우들을 다루고 있습니다.</p>

<p>
다음 함수는 올바른가요? 만약 매개변수 <span class=code>secs</span>가 60보다 훨씬 더 크다면 무슨 일이 일어납니까? 그런 경우에는 한 번의 자리이동만으로는 충분하지 않습니다; <span class=code>seconds</span>가 60보다 작아질 때까지 계속해서 자리이동을 해야 합니다. 한가지 해결책은 <span class=code><span class=keyword>if</span></span> 서술문을 <span class=code><span class=keyword>while</span></span> 서술문으로 대치하는 것입니다:</p>


<p>
<span class=code><span class=keyword>def</span> <span class=function>increment</span>(time, secs):
<br>&nbsp; time.seconds = time.seconds + secs
<br>
<br>&nbsp; <span class=keyword>while</span> time.seconds &gt;= 60:
<br>&nbsp; &nbsp; time.seconds = time.seconds - 60
<br>&nbsp; &nbsp; time.minutes = time.minutes + 1
<br>
<br>&nbsp; <span class=keyword>while</span> time.minutes &gt;= 60:
<br>&nbsp; &nbsp; time.minutes = time.minutes - 60
<br>&nbsp; &nbsp; time.hours = time.hours + 1
<br></span></p>
<p>
이제 이 함수는 올바릅니다. 그러나 최상의 효율적인 해결책은 아닙니다.</p>
<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, 이 함수를 재작성하여 회돌이를 전혀 가지지 않도록 해보세요.</i> </p>
<p style="margin-left: 30px; margin-right: 30px;"> <i>두 번째 연습으로, <span class=code>increment</span>를 순수한 함수로 재작성해 보세요. 그리고 두 버전 모두에 대해 함수 호출을 작성해 보세요.</i> </p>

<a name=4></a><br>
<h3>13.4 어느 것이 더 좋은가?</h3>

<p>
변경자로 할 수 있는 모든 것은 순수한 함수로도 역시 모두 할 수 있습니다. 사실, 어떤 프로그래밍 언어들은 오로지 순수한 함수만을 허용합니다. 순수한 함수를 사용하는 프로그램이 변경자를 사용하는 프로그램보다 더 빠르게 개발되고 에러를 덜 야기한다는 증거들이 있습니다. 그럼에도 불구하고, 때로는 변경자가 편리하며 어떤 경우에는 함수적 프로그램이 비효율적입니다.</p>

<p>
일반적으로, 그럴만한 이유가 있을 때마다 되도록이면 순수한 함수를 작성하기를 권장하며 변경자는 어쩔 수 없는 이점이 있을 때만 고려해 보시기를 권고합니다. 이러한 접근법을 <b>함수적 프로그래밍 스타일</b>이라고 부를 수도 있습니다.</p>

<a name=5></a><br>
<h3>13.5 원형 개발 대 계획</h3>

<p>
이 장에서는 <b>원형 개발(prototype development)</b>이라고 부르는 프로그램 개발에 대한 접근법을 예시해 보여 주었습니다. 각각의 경우에 기본적인 계산을 수행하는 대략적인 초안(또는 원형(prototype))을 작성해서 그 원형을 몇몇 사례에 대하여 테스트 해보고 결점들이 발견되면 교정하였습니다.</p>

<p>
이런 접근법이 효과적일 수 있음에도 불구하고 불필요하게 복잡한 코드를 만들게 될 가능성이 있습니다---왜냐하면 특수한 경우들을 많이 다루기 때문입니다---그리고 신뢰할 수 없는 코드가 될 가능성이 있습니다---왜냐하면 모든 에러를 발견했는지 알 수 없기 때문입니다.</p>

<p>
또 다른 대안은 <b>계획된 개발(planned development)</b>이라고 하는데 문제를 더 높은-수준에서 통찰할 수 있기 때문에 훨씬 더 쉽게 프로그래밍을 할수 있습니다. 이 경우에는 <span class=code>Time</span> 객체가 실제로는 60진법의 3-자리 수라는 것을 통찰할 수 있습니다! <span class=code>second</span> 구성요소는 "1의 자리"이고 <span class=code>minute</span> 구성요소는 "60의 자리"이며 그리고 <span class=code>hour</span> 구성요소는 "3600의 자리"입니다.</p>

<p>
<span class=code>addTime</span>과 <span class=code>increment</span>를 작성할 때, 60진법을 사용하여 효과적으로 덧셈을 하고 있었습니다. 60진법을 사용했던 이유는 한 자리에서 다른 자리로 올림을 해야 했기 때문입니다.</p>

<p>
이렇게 관찰해 보면 전체 문제에 대해서 또 다른 접근법을 생각해 볼 수 있습니다---<span class=code>Time</span> 객체를 한 자리 수로 변환할 수 있으며 컴퓨터가 숫자들을 수리적으로 처리하는 법을 알고 있다는 사실을 이용할 수 있습니다. 다음 함수는<span class=code>Time</span> 객체를 정수로 변환합니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>convertToSeconds</span>(t):
<br>&nbsp; minutes = t.hours * 60 + t.minutes
<br>&nbsp; seconds = minutes * 60 + t.seconds
<br>&nbsp; <span class=keyword>return</span> seconds
<br></span></p>



<p>이제, 필요한 모든 것은 정수를 <span class=code>Time</span> 객체로 변환하는 방법입니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>makeTime</span>(secs):
<br>&nbsp; time = Time()
<br>&nbsp; time.hours = secs/3600
<br>&nbsp; secs = secs - time.hours * 3600
<br>&nbsp; time.minutes = secs/60
<br>&nbsp; secs = secs - time.minutes * 60
<br>&nbsp; time.seconds = secs
<br>&nbsp; <span class=keyword>return</span> time
<br></span></p>



<p>
한 진법에서 다른 진법으로 변환하는 이 테크닉이 옳다는 확신을 하려면 약간 더 생각해 볼 필요성이 있을 것입니다. 확신한다고 생각되면 이런 함수들을 사용해서 <span class=code>addTime</span>을 재작성할 수 있습니다:</p>
<p>
<span class=code><span class=keyword>def</span> <span class=function>addTime</span>(t1, t2):
<br>&nbsp; seconds = convertToSeconds(t1) + convertToSeconds(t2)
<br>&nbsp; <span class=keyword>return</span> makeTime(seconds)
<br></span></p>
<p>
이 버전이 원래 버전보다 훨씬 더 짧습니다. 그리고 (보통때 처럼 호출되는 함수들이 옳다는 가정하에) 이 버전이 옳다는 것을 훨씬 더 쉽게 보여줄 수 있습니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, 같은 방식으로 <span class=code>increment</span> 함수를 재작성해 보세요.</i> </p>

<a name=6></a><br>
<h3>13.6 일반화</h3>

<p>
어떤 면에서 60진법을 10진법으로 그리고 그 반대로 변환하는 것이 단순히 시간을 다루는 것보다 더 어렵습니다. 진법변환이 더 추상적이며; 시간을 다루는데는 직관이 더 좋기 때문입니다.</p>

<p>
그러나 시간을 60진수로 다룰 통찰력이 있고 변환 함수(<span class=code>convertToSeconds</span>와 <span class=code>makeTime</span>)를 작성하는데 투자한다면, 우리가 얻는 프로그램은 더 짧고 읽고 디버그하기에 더 쉽고, 더욱 신뢰할 만할 것입니다.</p>

<p>
또 나중에 특징들을 새로 추가하기도 더 쉽습니다. 예를 들어, 두 개의 <span class=code>Time</span> 사이를 빼서 그들 사이의 기간을 계산한다고 상상해 보세요. 초보적인 접근법은 빌림이 있는 뺄셈을 구현하는 것이 될 것입니다. 변환 함수들을 사용하게 되면 더 쉽게 교정될 수 있으며 그리고 교정에 성공할 가능성이 더욱 높을 것입니다.</p>

<p>
묘하게도 어떤 때는 문제를 더 어렵게(즉 더욱 일반적으로) 만들면 더 쉽게 해결할 수 있게 됩니다. (왜냐하면 특수한 경우들이 더 적으며 에러의 가능성도 더 적기 때문입니다).</p>

<a name=7></a><br>
<h3>13.7 알고리즘</h3>

<p>
문제 하나에 대한 구체적인 해결책과는 대조적으로, 한 부류의 문제들에 대하여 일반적인 해결책을 작성한다면 <b>알고리즘(algorithm)</b>을 작성한 것이 됩니다. 이전에 이 단어를 언급한 바 있지만 신중하게 정의하지는 않았습니다. <b>알고리즘(algorithm)</b>을 정의하기는 쉽지 않습니다. 그래서 여러 접근법을 시도해 보겠습니다.</p>

<p>먼저, 알고리즘이 아닌 것을 생각해 봅시다. 한-자리 수 곱셈을 배울 때 아마도 구구단을 암기했을 것입니다. 요컨데, 100가지 구체적인 해결책을 암기했던 것입니다. 그런 종류의 지식은 알고리즘적이 아닙니다.</p>

<p>
그러나 만약 여러분이 "게으르다면(lazy)", 약간의 꼼수를 배워서 속일 수 있었을 것입니다. 예를 들어, <tt>n</tt>과 9의 곱을 찾으려면, <tt>n-1</tt>을 첫 번째 자리로 그리고 <tt>10-n</tt>을 두 번째 자리로 쓸 수 있습니다. 이런 꼼수는 9와 한 자리수 곱셈을 해결하는 일반적인 해결책입니다. 그것이 바로 알고리즘입니다!</p>

<p>
비슷하게, 덧셈에서 올림과 뺄셈에서 빌림 그리고 배정도 나눗셈에 대하여 배운 테크닉들은 모두 알고리즘입니다. 알고리즘의 특징중 하나는 전혀 지능을 동반할 필요가 없다는 것입니다. 알고리즘은 각 단계가 간단한 규칙의 모둠에 의거하여 마지막까지 이어지는 기계적인 처리과정입니다.</p>

<p>
알고리즘을 실행하는 법을 배우면서 그 많은 시간을 학교에서 낭비하는 것은 안타까운 일입니다. 알고리즘을 실행하는 법은 문자 그대로 아무런 지능도 요구하지 않습니다.</p>

<p>
반면에, 알고리즘을 디자인하는 과정은 재미있고 지적인 도전이며 그리고 프로그래밍이라고 부르는 것의 핵심부분입니다.</p>

<p>
사람들이 자연스럽게, 아무 어려움 없이 또는 의식적인 생각을 하지 않고서 하는 것들은 알고리즘적으로 표현하기가 정말 어렵습니다. 자연어에 대한 이해가 좋은 예입니다. 누구나 자연스럽게 말합니다. 그러나 지금까지 아무도 <i>어떻게</i> 자연스럽게 말할 수 있는지 적어도 알고리즘의 형태로는 설명할 수 없었습니다.</p>

<a name=8></a><br>
<h3>13.8 용어 해설</h3>

<dl>

<dt>순수한 함수(pure function)</dt>
<dd>매개변수로 받아들이는 객체들을 전혀 변경하지 않는 함수. 아주 순수한 함수는 유익(fruitful)하다.</dd>

<dt>변경자(modifier)</dt>
<dd>매개변수로 받아들이는 객체들을 하나 이상 변경하는 함수. 지극한 변경자는 쓸모가 없다(void).</dd>

<dt>기능적 프로그래밍 스타일(functional programming style)</dt>
<dd>프로그램 디자인 스타일의 일종으로 이런 스타일에서는 상당수가 순수한 함수들이다.</dd>

<dt>원형 개발(prototype development)</dt>
<dd>원형에서 시작하여 점차적으로 그 원형을 테스트하고 개선시켜 나가면서 프로그램을 개발하는 방법.</dd>

<dt>계획된 개발(planned development)</dt>
<dd>점증적 개발 또는 원형 개발보다는 더 계획적이며 문제에 대한 고-수준의 통찰이 관련된 프로그램 개발 방법.</dd>

<dt>알고리즘(algorithm)</dt>
<dd>한 부류의 문제들을 기계적이고 비지능적인 처리과정으로 해결하기 위한 한 모둠의 지령어.</dd>



</dl>
<h2>연습문제</h2>
<ol>
<li><div class="exercise">
<code>print_time</code> 함수를 작성하라. 이 함수는 <code>Time</code> 객체를 인자로 받아 <code>hours:minutes:seconds</code>의 형태로 인쇄한다.
</div></li>

<li><div class="exercise">
불리언 함수 <code>after</code>를 작성하라. 이 함수는 두 개의 <code>Time</code> 객체 <code>t1</code>과 <code>t2</code>를 인자로 받아 시간적으로 <code>t1</code>이 <code>t2</code> 다음에 오면 <code>True</code>를 돌려주고 그렇지 않으면 <code>False</code>를 돌려준다.
</div></li>

<li><div class="exercise">
<code>increment</code> 함수가 회돌이를 하나도 포함하지 않도록 재작성하라.
</div></li>

<li><div class="exercise">
이제 <code>increment</code>를 순수한 함수로 재작성하고, 두 버전 모두에 대하여 함수 호출을 작성하라.
</div></li>
</ol>

<p>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap14.htm"><img border="0" alt="Next" src="images/next.png"></a></td>
    <td width="20" class=head><a href="index.htm"><img border="0" alt="Up" src="images/up.png"></a></td>
    <td width="20" class=head><a href="chap12.htm"><img border="0" alt="Previous" src="images/prev.png"></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png"></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
    <td width="20" class=head><a href="dex.htm"><img border="0" alt="Index" src="images/index.png"></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
  </tr>
</table>
<hr>

</body>
</html>
