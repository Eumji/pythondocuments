<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>제 18 장 : 스택</title>
<META http-equiv=Content-Type content="text/html; charset=utf-8">

<style type="text/css">
<!--
body {background-color: white; color: black;}
a {background-color: white; color: blue; text-decoration: underline;}
a:hover {text-decoration: none;}
td.head,td.headcenter {background-color: #99ccff; color: black;}
td.headcenter {width: 100%; text-align: center;}
img {border-style: none;}
-->
</style>


<style type="text/css">
<!--
.code {font-family: Courier; font-size: 85%;}
.keyword {color: #0000ff;}
.comment {color: #008000;}
.quote {color: #ff0000;}
.function {color: #0000ff;}
-->
</style>

</head>

<body>

<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap19.htm" ><img border="0" alt="Next" src="images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="chap17.htm" ><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
  </tr>
</table>
<hr>


<h2>제 18 장</h2>

<h1>스택</h1>


<a name=1></a><br>
<h3>18.1 추상적인 데이타 유형</h3>
<p>
지금까지 살펴 본 데이타 형들은 그 데이타 형을 어떻게 구현될 지 완전하게 지정한다는 의미에서 모두 구체적인 것입니다. 예를 들어 <span class=code>Card</span> 클래스는 두 개의 정수를 사용하여 하나의 카드를 표현합니다. 그 때 연구한 바와 같이 그것만이 카드를 표현하는 유일한 방법은 아닙니다; 다른 방식의 구현이 많이 있습니다.</p>

<p><b>추상적인 데이타 유형(abstract data type (ADT))</b>는 한 모둠의 연산(즉 메쏘드)과 그 연산의 의미구조(무엇을 할지)는 지정하지만 그 구현은 지정하지 않습니다. 이런 이유로 추상적이 됩니다.</p>

<p>왜 ADT는 유용한가?</p>

<ul>
<li>연산이 어떻게 수행되는지에 대하여 생각할 필요없이 필요한 연산을 동시에 표기할 수 있다면, 알고리즘을 지정하는 작업이 간단해집니다.</li>

<li>ADT를 구현하는 방법에는 보통 여러가지가 있으므로, 가능한 모든 구현에 사용할 수 있도록 알고리즘을 작성하는 것이 유용할 것입니다.</li>

<li>잘-알려진 ADT들은 이 장에서의 ADT와 같이 보통 표준 라이브러리에 구현되어 있으므로 한번 작성되기만 하면 많은 프로그래머들이 사용할 수 있습니다.</li>

<li>ADT에 대한 연산들은 보통 고-수준 언어로 알고리즘을 논의하고 지정합니다.</li>

</ul>

<p>
ADT에 대하여 논의할 때 종종 클라이언트(<b>client</b>)와 프로바이더(<b>provider</b>)로 구분합니다. 클라이언트는 ADT를 사용하는 코드이고 프로바이더는 ADT를 구현하는 코드입니다.</p>



<a name=2></a><br>
<h3>18.2 스택 ADT</h3>
<p>
이 장에서는 일반적인 ADT 하나, 즉 <b>stack</b>을 살펴 보겠습니다. 스택은 집단입니다. 다시 말해 여러 요소들을 포함하고 있는 데이타 구조를 뜻합니다. 지금까지 본 다른 집단으로는 사전과 리스트가 있습니다.</p>

<p>
ADT는 이 자료에 대해 수행될 수 있는 연산들로 정의되는데, 이것을 접근방식(<b>interface</b>)이라고 부릅니다. 스택에 대한 접근방식은 다음과 같은 연산으로 구성됩니다:</p>

<dl>

<dt><span class=code>__init__</span></dt>
<dd>빈 리스트 하나를 새롭게 초기화한다.</dd>

<dt><span class=code>push</span></dt>
<dd>스택에 항목 하나를 새롭게 추가한다.</dd>

<dt><span class=code>pop</span></dt>
<dd>스택으로부터 항목을 제거하고 반환한다. 반환되는 항목은 항상 마지막으로 추가된 항목이다.</dd>

<dt><span class=code>isEmpty</span></dt>
<dd>스택이 비었는지 점검한다.</dd>

</dl>

<p>
종종 스택은 "후입 선출", 즉 LIFO 데이타 구조라고 불리우는데, 가장 마지막으로 추가된 항목이 제일 먼저 제거되기 때문입니다.</p>

<a name=3></a><br>
<h3>18.3 파이썬의 리스트로 스택을 구현하기</h3>
<p>
파이썬이 제공하는 내장 리스트는 스택을 정의하는 연산과 유사합니다. 리스트의 접근방식은 정확하게 예상한대로는 아닙니다. 그러나 스택 ADT로부터 내장 연산으로 번역하는 코드를 작성할 수 있습니다.</p>

<p>
이런 코드를 스택 ADT의 구현(<b>implementation</b>)이라고 부릅니다. 일반적으로, 구현이란 접근방식에 대한 구문적 요구조건과 의미구조적 요구조건을 만족하는 메쏘드들의 모둠입니다.</p>

<p>
다음은 파이썬의 리스트를 사용하여 스택 ADT를 구현한 것입니다:</p>


<p><span class=code><span class=keyword>class</span> Stack :
<br>&nbsp; <span class=keyword>def</span> <span class=function>__init__</span>(self) :
<br>&nbsp; &nbsp; self.items = []
<br>
<br>&nbsp; <span class=keyword>def</span> <span class=function>push</span>(self, item) :
<br>&nbsp; &nbsp; self.items.append(item)
<br>
<br>&nbsp; <span class=keyword>def</span> <span class=function>pop</span>(self) :
<br>&nbsp; &nbsp; <span class=keyword>return</span> self.items.pop()
<br>
<br>&nbsp; <span class=keyword>def</span> <span class=function>isEmpty</span>(self) :
<br>&nbsp; &nbsp; <span class=keyword>return</span> (self.items == [])
<br></span></p>



<p><span class=code>Stack</span> 객체는 <span class=code>items</span>라는 이름의 속성을 가지는데 이것은 스택에 있는 항목들의 리스트입니다. 초기화 메쏘드는 <span class=code>items</span>를 빈 리스트로 설정합니다.</p>
<p>
스택에 새로운 항목 하나를 올려 놓기 위해 <span class=code>push</span>는 항목을 <span class=code>items</span>에 추가합니다. 스택에서 항목 하나를 꺼내기 위해 <span class=code>pop</span>은 똑 같은 이름의 list 메쏘드를 사용하여 리스트에서 마지막 항목을 제거해서 반환합니다.</p>

<p>
마지막으로 스택이 비었는지 점검하기 위해 <span class=code>isEmpty</span>는 <span class=code>items</span>를 빈 리스트와 비교합니다.</p>
<p>
이와 같이 간단한 구현에서는 메쏘드가 기존의 메쏘드를 단순히 호출하는 것으로 구성되어 있으므로, 이런 구현을 겉껍질(<b>veneer</b>)이라고 부릅니다. 실제 삶에서 겉껍질(veneer)은 좋은 품질의 나무로 된 얇은 코팅막으로서 가구-만들기에 사용되어 밑에 있는 조악한 품질의 나무를 감추어 줍니다. 컴퓨터 과학자는 이 은유법을 사용하여 작은 조각 코드를 기술합니다. 이것은 구현의 세부사항을 감추고 더 간단하고 더욱 표준적인 접근방식을 제공합니다.</p>

<a name=4></a><br>
<h3>18.4 눌러넣기(Pushing)와 튀겨꺼내기(popping)</h3>
<p>
스택은 총괄 데이타 구조(<b>generic data structure</b>)입니다. 이는 어떤 종류의 항목도 거기에 추가할 수 있다는 것을 의미합니다. 다음 예제는 정수 두 개와 문자열 한 개를 스택에 눌러 넣습니다:</p>


<p><span class=code>&gt;&gt;&gt; s = Stack()
<br>&gt;&gt;&gt; s.push(54)
<br>&gt;&gt;&gt; s.push(45)
<br>&gt;&gt;&gt; s.push(<span class=quote>"+"</span>)
<br></span></p>



<p>
<span class=code>isEmpty</span>와 <span class=code>pop</span>을 사용하여 스택에 있는 모든 항목들을 제거하고 인쇄합니다:</p>


<p><span class=code><span class=keyword>while not</span> s.isEmpty() :
<br>&nbsp; <span class=keyword>print</span> s.pop(),
<br></span></p>

<p>
출력 결과는 <span class=code>+ 45 54</span>입니다. 다른 말로 하면, 오로지 스택을 이용하여 항목들을 거꾸로 인쇄합니다! 허용이 안되는 것은 아니지만, 그것은 리스트를 출력하기 위한 표준적인 방식이 아닙니다. 그러나 스택을 사용하면 놀랍도록 쉽게 처리할 수 있습니다.</p>
<p>
이 코드 조각을 <a href="chap17.htm#4">섹션 17.4</a>에 있는 <span class=code>printBackward</span>의 구현과 비교해 보아야 합니다. 여기에서의 스택 알고리즘과 재귀적인 버전의 <span class=code>printBackward</span> 사이에는 자연스럽게 비교 관계가 있습니다. 그 차이는 <span class=code>printBackward</span>가 리스트를 순회하면서 실행시간 스택을 사용하여 노드들을 추적 유지하고, 재귀로부터 복귀하면서 그 노드들을 인쇄한다는 것입니다. 스택 알고리즘도 그와 똑 같은 일을 합니다. 다만 실행시간 스택 대신에 <span class=code>Stack</span> 객체를 사용한다는 점만 빼고 말입니다.</p>

<a name=5></a><br>
<h3>18.5 스택을 사용하여 후위식(postfix)을 평가하기</h3>
<p>
대부분의 프로그래밍 언어에서 수학적 표현식은 두 피연산자 사이에 있는 연산자로 작성됩니다, <span class=code>1+2</span>과 같이 말입니다. 이런 형식을 중위식(<b>infix</b>)이라고 부릅니다. 어떤 계산기는 후위식(<b>postfix</b>)이라는 다른 방식을 사용합니다. 후위식에서 연산자는 피연산자 뒤에 있습니다. <span class=code>1 2 +</span>와 같이 말입니다.</p>
<p>
후위식이 종종 유용한 이유는 스택을 사용하면 자연스럽게 후위 표현식을 평가할 수 있기 때문입니다:</p>

<ul>

<li>표현식의 처음에서 시작하여, 한 번에 한 항(연산자 또는 피연산자)를 얻는다.</li>

<ul>

<li>만약 그 항이 피연산자라면, 그것을 스택에 눌러넣는다.</li>

<li>만약 그 항이 연산자라면, 두 개의 피연산자를 스택에서 튀겨 꺼낸다. 그것들에 대하여 연산을 수행한다. 그리고 그 결과를 다시 스택에 눌러넣는다.</li>

</ul>

<li>표현식의 끝에 도달하면 스택에는 정확하게 하나의 피연산자만 남아 있을 것이다. 그 피연산자가 결과이다.</li>

</ul>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, 이 알고리즘을 <span class=code>1 2 + 3 *</span> 표현식에 적용해 보세요.</i> </p>

<p>
이 예제는 후위식의 장점중 하나를 보여줍니다---연산의 순서를 제어하기 위하여 괄호를 사용할 필요가 전혀 없습니다. 중위식으로 같은 결과를 얻으려면 <span class=code>(1 + 2) * 3</span>과 같이 작성해야 할 것입니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, <span class=code>1 + 2 * 3</span>과 동등한 후위 표현식을 작성해 보세요.</i> </p>

<a name=6></a><br>
<h3>18.6 해석(Parsing)</h3>

<p>
이전의 알고리즘을 구현하려면 문자열을 순회하여 그것을 연산자와 피연산자로 쪼갤 수 있어야 합니다. 이 과정은 해석(<b>parsing</b>)의 한 예 입니다. 그리고 그 결과들은--- 분해된 문자열의 덩어리들 각각을 ---토큰(<b>tokens</b>)이라고 부릅니다. 제 1 장에서 이러한 단어들을 본 기억이 나실 것입니다.</p>
<p>
파이썬은 <span class=code>split</span> 메쏘드를 <span class=code>string</span> 모듈과 <span class=code>re</span> (정규 표현식(regular expression)) 모듈 모두에 제공합니다. 다음 함수 <span class=code>string.split</span>은 한 개의 문자를 구분자(<b>delimiter</b>)로 사용하여 문자열을 리스트로 분리합니다. 예를 들어:</p>


<p><span class=code>&gt;&gt;&gt; <span class=keyword>import</span> string
<br>&gt;&gt;&gt; string.split(<span class=quote>"Now is the time"</span>,<span class=quote>" "</span>)
<br>[<span class=quote>'Now'</span>, <span class=quote>'is'</span>, <span class=quote>'the'</span>, <span class=quote>'time'</span>]
<br></span></p>



<p>
이 경우에 구분자는 공백 문자입니다. 그래서 문자열은 각 공백에서 나뉘어집니다.</p>
<p>
다음 <span class=code>re.split</span> 함수는 더 강력해서, 이 함수를 사용하면 구분자(delimiter) 대신에 정규 표현식을 제공할 수 있습니다. 정규 표현식은 한 모둠의 문자열들을 지정하는 방법입니다. 예를 들어, [A-z]는 모든 문자들의 모둠이고 [0-9]는 모든 숫자들의 모둠입니다. ^연산자는 모둠을 부인합니다. 그래서 [^0-9]는 숫자가 아닌 모든 것의 모둠이며, 바로 이 모둠을 사용하여 후위 표현식을 분리하고자 합니다:</p>


<p><span class=code>&gt;&gt;&gt; <span class=keyword>import</span> re
<br>&gt;&gt;&gt; re.split(<span class=quote>"([^0-9])"</span>, <span class=quote>"123+456*/"</span>)
<br>[<span class=quote>'123'</span>, <span class=quote>'+'</span>, <span class=quote>'456'</span>, <span class=quote>'*'</span>, <span class=quote>''</span>, <span class=quote>'/'</span>, <span class=quote>''</span>]
<br></span></p>



<p>
인자들의 순서가 <span class=code>string.split</span>과 다르다는 것을 주목하세요; 구분자는 문자열의 앞에 옵니다.</p>
<p>
결과 리스트에는 피연산자로 <span class=code>123</span>과 <span class=code>456</span>이 있으며 연산자는 <span class=code>*</span>와 <span class=code>/</span>가 있습니다. 또 피연산자 뒤에 삽입되는 두 개의 빈 문자열이 있습니다.</p>

<a name=7></a><br>
<h3>18.7 후위식을 평가하기</h3>
<p>
후위 표현식을 평가하기 위해서 이전의 섹션에 있는 해석기와 그 이전 섹션에 있는 알고리즘을 사용하겠습니다. 단순함을 유지하기 위해 함께 시작할 평가기(evaluator)는 오직 <span class=code>+</span>와 <span class=code>*</span> 연산자만 구현합니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>evalPostfix</span>(expr):
<br>&nbsp; <span class=keyword>import</span> re
<br>&nbsp; tokenList = re.split(<span class=quote>"([^0-9])"</span>, expr)
<br>&nbsp; stack = Stack()
<br>&nbsp; <span class=keyword>for</span> token <span class=keyword>in</span> tokenList:
<br>&nbsp; &nbsp; <span class=keyword>if</span>&nbsp; token == <span class=quote>''</span> <span class=keyword>or</span> token == <span class=quote>' '</span>:
<br>&nbsp; &nbsp; &nbsp; <span class=keyword>continue
<br>&nbsp; &nbsp; if</span>&nbsp; token == <span class=quote>'+'</span>:
<br>&nbsp; &nbsp; &nbsp; sum = stack.pop() + stack.pop()
<br>&nbsp; &nbsp; &nbsp; stack.push(sum)
<br>&nbsp; &nbsp; <span class=keyword>elif</span> token == <span class=quote>'*'</span>:
<br>&nbsp; &nbsp; &nbsp; product = stack.pop() * stack.pop()
<br>&nbsp; &nbsp; &nbsp; stack.push(product)
<br>&nbsp; &nbsp; <span class=keyword>else</span>:
<br>&nbsp; &nbsp; &nbsp; stack.push(int(token))
<br>&nbsp; <span class=keyword>return</span> stack.pop()
<br></span></p>



<p>
첫 번째 조건은 공백과 빈 문자열을 처리합니다. 이후의 두 조건은 연산자(operators)를 처리합니다. 현재, 다른 모든 것은 반드시 피연산자라고 가정합니다. 물론, 잘못된 입력을 점검하고 에러 메시지를 보고하는 것이 더 좋겠지만 나중에 그것을 다루어 보겠습니다.</p>

<p>
다음 후위식 <span class=code>(56+47)*2</span> 형태를 평가함으로써 이 평가기를 테스트해 봅시다:</p>


<p><span class=code>&gt;&gt;&gt; <span class=keyword>print</span> evalPostfix (<span class=quote>"56 47 + 2 *"</span>)
<br>206
<br></span></p>

<p>이제 상당히 비슷하게 구현되었습니다.</p>

<a name=8></a><br>
<h3>18.8 클라이언트와 프로바이더</h3>
<p>
ADT의 기본적인 목표중 하나는 ADT를 구현하는 코드를 작성하는 프로바이더의 관심과 그 ADT를 사용하는 클라이언트의 관심을 분리하는 것입니다. 프로바이더는 오직 구현이---그 ADT의 규격에 맞추어서---올바른 지에 대해서만 걱정하면 됩니다. 그 구현이 어떻게 사용될지는 걱정할 필요가 없습니다.</p>
<p>
반대로, 클라이언트는 ADT의 구현이 올바르다고 가정(<i>assumes</i>)합니다. 그리고 그 세부사항들은 걱정하지 않습니다. 파이썬의 내장 유형중 하나를 사용하면 오로지 클라이언트로서만 생각하면 되는 즐거움을 만끽할 수 있습니다.</p>

<p>
물론, ADT를 구현할 때 그것을 테스트하기 위한 클라이언트 코드도 작성할 필요가 있습니다. 이 경우에 둘 모두의 역할을 수행해야하고, 이것은 혼란스러울 수 있습니다. 어느 순간에나 어떤 역할을 수행하고 있는지를 추적 유지하도록 노력해야 합니다.</p>

<a name=9></a><br>
<h3>18.9 용어 해설</h3>

<dl>

<dt>추상적 데이타 형 (ADT)</dt>
<dd>한 모둠의 연산에 의해서 정의되지만 다양한 방식으로 구현이 가능한 데이타 유형 (보통 객체의 집단).</dd>

<dt>접근방식(interface)</dt>
<dd>ADT를 정의하는 연산들의 모둠.</dd>

<dt>구현(implementation)</dt>
<dd>한 접근방식에 대한 구문적 요구조건과 의미구조적 요구조건을 만족하는 코드.</dd>

<dt>클라이언트(client)</dt>
<dd>ADT를 사용하는 프로그램 (또는 그것을 작성한 사람).</dd>

<dt>제공자(provider)</dt>
<dd>ADT를 구현하는 코드 (또는 그것을 작성한 사람).</dd>

<dt>겉껍질(veneer)</dt>
<dd>다른 메쏘드들을 때로는 약간 변경하여 호출하는 메쏘드 정의들로서 ADT가 구현된 클래스 정의. 겉껍질(veneer)은 크게 중요한 작업은 아니지만, 클라이언트의 접근방식을 표준화하고 개선한다.</dd>

<dt>총괄 데이타 구조(generic data structure)</dt>
<dd>어떤 종류의 데이타도 담을 수 있는 일종의 데이타 구조.</dd>

<dt>중위식(infix)</dt>
<dd>두 피연산자 사이에 연산자를 놓아 수학적 표현식을 작성하는 방식.</dd>

<dt>후위식(postfix)</dt>
<dd>피연산자들 뒤에 연산자를 놓아 수학적 표현식을 작성하는 방식.</dd>

<dt>해석(parse)</dt>
<dd>문자들 또는 토큰들의 문자열을 읽어서 그의 문법적 구조를 분석하는 것.</dd>

<dt>토큰(token)</dt>
<dd>
해석의 목적으로 한단위로 취급되는 한 모둠의 문자들, 자연 언어에서는 단어와 같다.</dd>

<dt>구분자(delimiter)</dt>
<dd>토큰을 분리하기 위하여 사용되는 문자, 자연언어에서는 구두점과 같다.</dd>

</dl>

<h2>연습문제</h2>
<ol>
<li><div class="exercise">
<p>후위식 알고리즘을 표현식 <code>1 2 + 3 *</code>에 적용하라.</p>

<p>
이 예제는 후위식의 장점중 하나를 보여준다 --- 즉 연산 순서를 제어하기 위하여 괄호를 사용할 필요가 없다. 중위식으로 같은 결과를 얻으려면 <code>(1 + 2) * 3</code>으로 작성해야 한다.</p>
</div></li>

<li><div class="exercise">
<code>1 + 2 * 3</code>과 동등한 후위식을 작성하라.
</div></li>
</ol>

<p>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap19.htm" ><img border="0" alt="Next" src="images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="chap17.htm" ><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
  </tr>
</table>
<hr>

</body>
</html>
