<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>부록 A: 디버깅</title>
<META http-equiv=Content-Type content="text/html; charset=utf-8">

<style type="text/css">
<!--
body {background-color: white; color: black;}
a {background-color: white; color: blue; text-decoration: underline;}
a:hover {text-decoration: none;}
td.head,td.headcenter {background-color: #99ccff; color: black;}
td.headcenter {width: 100%; text-align: center;}
img {border-style: none;}
-->
</style>


<style type="text/css">
<!--
.code {font-family: Courier; font-size: 85%;}
.keyword {color: #0000ff;}
.comment {color: #008000;}
.quote {color: #ff0000;}
.function {color: #0000ff;}
-->
</style>

</head>

<body>

<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="app02.htm"><img border="0" alt="Next" src="images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm"><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="chap21.htm"><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png"></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
    <td width="20" class=head><a href="dex.htm"><img border="0" alt="Index" src="images/index.png"></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
  </tr>
</table>
<hr>


<h2>부록 A</h2>

<h1>디버깅</h1>
<p>
프로그램에서 다양한 종류의 에러가 많이 일어날 수 있다. 디버깅을 해서 에러를 더욱 신속하게 추적해 들어가려면 에러의 종류를 구별하는 것이 좋다:</p>

<ul>

<li>
구문 에러는 소스 코드를 파이썬 코드로 번역할 때 파이썬이 만들어 낸다. 구문에러는 보통 프로그램의 구문에 무엇인가 문제가 있다는 것을 나타낸다. 예: <span class=code><span class=keyword>def</span></span> 서술문의 마지막에 쌍점을 빼 먹는 것.</li>

<li>
실행시간 에러는 프로그램이 실행되는 동안에 무엇인가 잘못된다면 실행시간 시스템이 만들어 낸다. 대부분의 실행시간 에러 메시지는 에러가 일어난 곳과 어떤 함수가 실행되고 있었는지에 대한 정보를 포함하고 있다. 예: 무한 재귀는 결국 "최대 재귀 깊이를 초과하는" 실행시간 에러를 야기한다.</li>

<li>
의미구조 에러(Semantic errors)는 프로그램이 컴파일되고 실행되지만 정확한 일을 수행하지 않을 때 발생하는 문제이다. 예: 하나의 표현식이 예상한 순서대로 평가되지 않아서, 결과적으로 예상치 못한 결과를 산출하는 것.</li>

</ul>

<p>
디버깅의 첫 번째 단계는 어떤 종류의 에러를 처리해야 하는지 알아내는 것이다. 다음 섹션은 에러의 종류에 따라서 조직되었지만, 어떤 테크닉들은 여러 상황에 적용될 수 있다.</p>

<br>
<h3>구문 에러(Syntax errors)</h3>
<p>
구문에러는 그 에러가 무엇인지 알기만 하면 보통 쉽게 수정할 수 있다. 불행하게도 에러 메시지는 보통 도움이 되지 않는다. 가장 흔한 메시지는 "SyntaxError: invalid syntax"와 "SyntaxError: invalid token"인데 둘 다 별로 정보를 주지 않는다.</p>
<p>
그렇기는 하지만 구문에러 메시지는 문제가 프로그램의 어디에서 일어났는지 말해 준다. 실제로 구문에러 메시지는 파이썬이 문제를 인지한 곳을 알려 주는데, 반드시 에러가 있는 곳일 필요는 없다. 어떤 때는 에러 메시지의 위치 앞에 에러가 있기도 하며, 어떤 때는 바로 앞 줄에 있을 수도 있다.</p>
<p>
만약 프로그램을 점증적으로 구축하고 있다면, 구문에러가 어디에 있는지 확실하게 알수가 있다. 구문에러는 마지막으로 추가한 바로 그 줄에 있을 것이다.</p>
<p>
책에서 코드를 복사했다면 제일 먼저 복사된 코드를 책에 있는 코드와 아주 주의깊게 비교하자. 모든 문자들을 점검하라. 동시에 그 책이 틀릴 수도 있다는 것을 기억하자. 그래서 만약 구문 에러처럼 보이는 어떤 것을 발견한다면, 그것이 바로 구문에러일 것이다.</p>
<p>
다음은 가장 흔하게 구문에러를 유발하는 원인들을 피하기 위한 방법이다:</p>
<ol>
<li>파이썬 키워드를 변수 이름으로 사용하고 있지는 않은지 확인하라.</li>
<li>모든 복합 서술문의 머리부에서 끝에 쌍점(colon)을 가지고 있는지 점검하라. 다음의 <span class=code><span class=keyword>for</span></span>, <span class=code><span class=keyword>while</span></span>, <span class=code><span class=keyword>if</span></span>, 그리고 <span class=code><span class=keyword>def</span></span> 서술문들을 포함한다.</li>
<li>
들여쓰기가 일관성이 있는지 점검하라. 공백이나 탭을 함께 사용하여 들여쓰기 해도 좋지만, 그 둘을 혼합하여 사용하지 않는 것이 최선이다. 각 수준은 같은 양의 들여 쓰기로 내포되어야 한다.</li>
<li>
코드에 있는 모든 문자열이 짝을 이뤄 인용 부호를 가지고 있는지 확인하라.</li>
<li>
만약 삼중 (홑 또는 겹) 따옴표로 여러 줄에 걸친 문자열이 있다면, 그 문자열을 적절히 끝마쳤는지 확인하라. 끝나지 않는 문자열은 프로그램의 마지막에서 "무효한 토큰(invalid token)" 에러를 야기하거나, 또는 그 프로그램에서 이후 부분을 다음 문자열에 다다를 때까지 문자열로 취급해 버릴 수도 있다. 이 경우에는 에러 메시지를 전혀 산출하지 않을 것이다!</li>
<li>
닫혀지지 않은 괄호---<span class=code>(</span>, <span class=code>{</span>, 또는 <span class=code>[</span>--- 때문에 파이썬은 다음 줄을 현재 서술문에 이어진다고 간주하고 계속해서 처리한다. 일반적으로 이 에러는 다음 줄에서 거의 즉시 일어날 것이다.</li>
<li>
조건문 안에서 <span class=code>==</span> 대신에 고전적인 <span class=code>=</span>을 사용하고 있는지 점검하라.</li>

</ol>

<p>만약 아무 문제도 없으면 다음 섹션으로 나아가라...</p>

<h4>어떻게 해도 프로그램을 실행시킬 수 없어요.</h4>
<p>
컴파일러가 에러가 있다고 말해주는데도 불구하고 그것을 이해하지 못하는 상황이라면 여러분과 컴파일러가 같은 코드를 보고 있는 것이 아니기 때문일 가능성이 있다. 여러분의 환경을 점검하여 편집하고 있는 프로그램이 파이썬이 실행하려고 하는 그 프로그램인지 확인하라. 확신할 수 없다면, 프로그램의 시작부분에 의도적으로 확실한 구문 에러를 배치하여 보라. 이제 그것을 다시 실행(혹은 반입) 하라. 만약 컴파일러가 그 새로운 에러를 발견하지 못하면, 아마도 여러분의 개발환경이 설정되는 방식에 무엇인가 잘못이 있다는 뜻이다.</p>

<br>
<h3>실행시간 에러(Runtime errors)</h3>
<p>
이 시점에서는 구문적으로 정확한 파이썬 코드로 이루어진 파일을 가지고 있다. 파이썬은 프로그램을 반입할 수 있고 그것을 실행할 수 있다. 무엇이 잘못될 수 있을까?</p>

<h4>프로그램이 아무것도 하지 않아요.</h4>
<p>
이 문제는 거의 대부분 파일이 함수와 클래스로 구성되어 있으며 실제로는 무엇엔가 실행을 시작하도록 요청하지 않을 때이다. 이 모듈을 반입하여 클래스와 함수만을 공급할 계획이라면 이것은 의도적일 수 있다.</p>
<p>
의도적인 것이 아니라면 상호대화 프롬프트에서 함수에 실행을 시작하도록 요청하거나 또는 함수에 함수를 실행하도록 요청하고 있는지 확인하라. 또 아래에 있는 "실행의 흐름(Flow of Execution)" 섹션을 참조하라.</p>

<h4>프로그램이 멈춰요.</h4>
<p>
프로그램이 중지하고 아무것도 하지 않는 듯이 보인다면, 그것을 "목이 매달려있다(hanging)"고 말한다. 이 말이 뜻하는 바는 종종 무한 회돌이 또는 무한 재귀에 빠졌다는 것을 뜻한다.</p>

<ul>
<li>
특정한 회돌이가 문제라는 의심이 든다면, <span class=code><span class=keyword>print</span></span> 서술문을 그 회돌이의 바로 앞에 추가해서 "회돌이에 들어감"이라고 출력하게 하고 바로 뒤에 또 하나를 추가하여 "회돌이를 빠져나감"이라고 출력하게 하라</li>
<p>
프로그램을 실행하라. 두 번째 메시지가 아니라 첫 번째 메시지를 만나면 무한 회돌이에 빠진 것이다. 아래에 있는 "무한 회돌이" 섹션으로 가라.</p>
<li>
무한 재귀에 빠지면 프로그램은대부분  잠시동안 실행되다가 "실행시간에러: 최대 재귀 깊이를 초과함(RuntimeError: Maximum recursion depth exceeded)"이라는 에러를 출력할 것이다. 그런 일이 일어나면 아래의 "무한 재귀" 섹션으로 가라.</li>
<p>
이러한 에러를 만나지 않을 지라도 재귀 메쏘드 또는 재귀 함수에 문제가 있다고 의심된다면, 여전히 "무한 재귀" 섹션에 있는 있는 테크닉을 사용할 수 있다.</p>
<li>
두 단계 어느쪽도 문제가 없으면, 다른 회돌이 그리고 다른 재귀 함수와 메쏘드의 테스트를 시작하라.</li>

<li>
이 단계에서도 작동하지 않으면, 프로그램의 실행 흐름을 이해하고 있지 못할 가능성이 있다. 아래에 있는 "실행의 흐름" 섹션으로 가라.</li>

</ul>

<h4>무한 회돌이(Infinite Loop)</h4>
<p>
무한 회돌이를 가지고 있다고 생각하고 어떤 회돌이가 문제를 야기하고 있는지 알고 있다면, <span class=code><span class=keyword>print</span></span> 서술문을 그 회돌이의 마지막에 추가하여 그 조건안에 있는 변수들의 값을 출력하고 그 조건의 값을 출력하라.</p>

<p>예를 들어:</p>


<p><span class=code><span class=keyword>while</span> x &gt; 0 <span class=keyword>and</span> y &lt; 0 :
<br>&nbsp; <span class=comment># x에 대해 무언가 처리한다.
</span><br>&nbsp; <span class=comment># y에 대해 무언가 처리한다.
</span><br>
<br>&nbsp; <span class=keyword>print</span>&nbsp; <span class=quote>"x: "</span>, x
<br>&nbsp; <span class=keyword>print</span>&nbsp; <span class=quote>"y: "</span>, y
<br>&nbsp; <span class=keyword>print</span>&nbsp; <span class=quote>"condition: "</span>, (x &gt; 0 <span class=keyword>and</span> y &lt; 0)
<br></span></p>

<p>
이제 프로그램을 실행할 때, 회돌이를 돌 때마다 세 줄의 출력을 볼 것이다. 회돌이의 마지막에서 조건은 <span class=code>false</span>가 되어야 한다. 만약 회돌이가 계속 진행되면, <span class=code>x</span>와 <span class=code>y</span>의 값을 볼 수 있을 것이다. 그리고 어쩌면 그 값들이 왜 갱신되고 있는지 정확하게 알 수 있을지도 모른다.</p>

<h4>무한 재귀(Infinite Recursion)</h4>
<p>
무한 재귀때문에 프로그램은 대부분 잠시동안 실행되다가 "최대 재귀 깊이를 초과함(Maximum recursion depth exceeded)" 에러를 일으킬 것이다.</p>
<p>
만약 한 함수 또는 메쏘드가 무한 재귀를 야기하고 있다고 의심된다면, 기저 케이스가 확실하게 있는지 제일 먼저 점검하라. 다른 말로 하면, 반드시 어떤 조건이 있어야만 그 함수 혹은 메쏘드가 재귀 호출을 하지 않고서도 복귀할 수 있을 것이다. 그렇지 않다면, 그 알고리즘을 재고하고 기저 케이스를 식별할 필요가 있다.</p>
<p>
만약 기저 케이스는 있으나 프로그램이 거기에 도달하지 않는 것 같다면, <span class=code><span class=keyword>print</span></span> 서술문을 그 함수 혹은 메쏘드의 시작부분에 추가하여 매개변수들을 출력시켜라. 이제 프로그램을 실행시키면, 그 함수 혹은 메쏘드가 요청될 때마다 몇 줄의 출력을 볼 것이다, 그리고 여러분은 그 매개변수들을 볼 것이다. 매개변수들이 기저 케이스로 이동하지 않는다면, 왜 이동하지 않는지에 대하여 어떤 아이디어를 얻을 것이다.</p>

<h4>실행의 흐름(Flow of Execution)</h4>
<p>
실행의 흐름이 어떻게 프로그램 전체를 통하여 움직이는지 확신하지 못한다면, <span class=code><span class=keyword>print</span></span> 서술문을 각 함수의 시작부분에 추가하여 다음과 같은 "함수 <span class=code>foo</span>에 들어감"이라는 메시지를 출력하게 하라. 여기에서 <span class=code>foo</span>는 그 함수의 이름이다.</p>
<p>
이제 프로그램을 실행하면, 그 프로그램은 요청이 될 때마다 각 함수를 추적해 출력할 것이다.</p>

<h4>프로그램을 실행하면 예외가 일어나요.</h4>
<p>
무언가 실행시간에 잘못되면 파이썬은 그 예외의 이름과 프로그램에서 문제가 발생한 줄 그리고 역추적을 담은 메시지를 출력한다.</p>
<p>
역추적은 현재 실행되고 있는 함수를 식별한다. 그리고 그 함수를 요청하는 함수를, 그리고 또 <i>그것을</i> 요청하는 함수를, 등등을 식별한다. 다른 말로 하면, 역추적은 현재의 위치까지 오게한 함수 요청의 경로를 추적한다. 역추적에는 파일에서 각 호출이 일어난 곳의 줄 번호가 포함된다.</p>
<p>
첫 번째 단계는 프로그램에서 에러가 일어난 위치를 조사하고 무엇이 일어났는지 이해할 수 있는지를 알아 보는 것이다. 다음은 가장 흔한 실행시간 에러들이다:</p>

<dl>

<dt>이름에러(NameError)</dt>
<dd>현재 환경에 존재하지 않는 변수를 사용하려고 시도하고 있다. 지역 변수들은 지역적이라는 것을 명심하라. 함수 안에 정의된 지역변수는 밖에서 참조할 수 없다.</dd>

<dt>유형에러(TypeError)</dt>
<dd>여러 원인이 가능하다:</dd>

<ul>
<li>
값을 부적절하게 사용하려고 하고 있다. 예: 정수 말고 다른 어떤 것으로 문자열이나 리스트 또는 터플을 지표화하려고 하는 것.</li>
<li>
형식화 문자열 안에 있는 항목들과 변환을 위해 넘겨진 항목들 사이에 불일치가 있다. 이것은 항목의 개수가 일치하지 않거나 유효하지 않은 변환이 요구될 때 일어날 수 있다.</li>
<li>
함수 또는 메쏘드에 넘겨 주는 인자의 개수가 잘못되었다. 메쏘드라면 그 정의를 살펴 보고 첫 번째 매개변수가 <span class=code>self</span>인지 점검하라. 그리고나서 그 메쏘드 요청을 살펴보라; 올바른 유형을 가진 객체에 메쏘드를 요청하고 있는지 그리고 다른 인자들을 정확하게 제공하고 있는지 확인하라.</li>

</ul>
<dt>키에러(KeyError)</dt>
<dd>사전이 가지고 있지 않은 키 값을 사용하여 그 사전의 요소에 접근하려 하고 있다.</dd>

<dt>속성에러(AttributeError)</dt>
<dd>존재하지 않는 속성 혹은 메쏘드에 접근하려 하고 있다.</dd>

<dt>지표에러(IndexError)</dt>
<dd>리스트나 문자열 또는 터플에 접근하기 위하여 사용하는 지표는 음수이거나 또는 그의 길이에서 1을 뺀 것보다 커야 한다. 그 에러가 일어난 장소 바로 앞에 <span class=code><span class=keyword>print</span></span> 서술문을 추가하여 지표의 값과 배열의 길이를 출력하라. 배열은 올바른 크기인가? 지표는 올바른 값인가?</dd>

</dl>

<h4><span class=code><span class=keyword>print</span></span> 서술문을 너무 많이 추가했더니 출력으로 넘쳐 흘러요.</h4>
<p>
디버깅을 하기 위해 <span class=code><span class=keyword>print</span></span> 서술문을 사용할 때의 문제중 하나는 프로그램이 끝날 때 출력에 파 묻힐 수 있다는 것이다. 두 가지의 처리 방법이 있다: 출력을 간결하게 하라; 또는 프로그램을 간결하게 하라.</p>
<p>
출력을 간결하게 하려면, 별로 도움이 되지 않는 <span class=code><span class=keyword>print</span></span> 서술문들을 제거하거나 주석처리하면 된다. 또는 이해하기 쉽도록 그것들을 결합하거나 출력을 형식화 할 수 있다.</p>
<p>
프로그램을 간결하게 하려면, 여러가지 방법이 있다. 첫 째, 문제를 최소화하여 프로그램을 작동시킨다. 예를 들어, 배열을 정렬하고 있다면, <i>작은(small)</i> 배열을 정렬하라. 프로그램이 사용자로부터 입력을 받는다면, 입력은 문제를 야기하므로 최소한으로 입력하라. </p>
<p>
두 번째, 프로그램을 깨끗하게 하라. 죽은 코드를 제거하고 프로그램을 재조직하여 되도록이면 쉽게 읽을 수 있도록 하라. 예를 들어, 문제가 프로그램에서 아주 깊숙히 내포된 부분에 있다고 의심된다면, 그 부분을 더 간결한 구조로 재작성해 보라. 거대한 함수가 의심되면, 그것을 더 작은 함수들로 쪼개어 따로따로 테스트 해보라.</p>
<p>
가끔 최소한의 테스트 사례를 찾는 과정에서 버그를 발견하기도 한다. 한 프로그램이 어떤 상황에서는 작동하고 다른 상황에서는 그렇지 않다면, 그것을 보고 무엇이 진행되고 있는지 실마리를 찾을 수 있다.</p>
<p>
비슷하게, 코드 조각을 약간만 재작성하면 미묘한 버그들을 찾아내는데 도움을 받을 수 있다. 변경을 하면서 프로그램에 영향을 미치지 않을 거라고 생각했지만 영향을 미치고 있다면 그것이 바로 실마리 정보가 될 수 있다.</p>

<br>
<h3>의미구조 에러(Semantic errors)</h3>
<p>
어떤 면에서 의미구조 에러는 디버그하기가 가장 어려운 형태이다. 왜냐하면 컴파일러와 실행시간 시스템은 무엇이 잘못되었는지 어떠한 정보도 제공하지 않기 때문이다. 여러분이 아는 것은 오직 프로그램이 무엇을 했어야 하는지와 그리고 그 프로그램이 그 일을 하지 않는다는 것을 알 뿐이다.</p>
<p>
첫 번째 단계는 프로그램 텍스트와 여러분이 보고 있는 행위 사이에 연결을 짓는 것이다. 프로그램이 실제로 무엇을 하고 있는지에 대한 가설이 필요하다. 연결을 어렵게 하는 것중의 하나는 컴퓨터가 너무 빠르다는 것이다.</p>
<p>
종종 프로그램의 속도를 인간의 속도 정도로 늦출 수 있었으면 하고 바랄 것이다. 그리고 어떤 디버거로는 그렇게 할 수 있다. 그러나 배치가 잘 되도록 <span class=code><span class=keyword>print</span></span> 서술문을 삽입하는 데 걸리는 시간이 디버거를 설정하고 정지점을 삽입하고 제거하면서 에러가 발생한 곳까지 프로그램을 "진행시키는" 시간과 비교하여 짧은 경우가 많다.</p>

<h4>프로그램이 작동하지 않아요.</h4>

<p>스스로에게 이러한 질문을 물어 보아야 한다:</p>

<ul>
<li>프로그램이 해야 하는 어떤 것이 있는가, 그런데 그런 일이 일어나지 않는 것 같은가? 그 함수를 수행하는 코드 부분을 찾아라 그리고 그래야만 한다고 생각할 때 그 함수가 실행되는지를 확인하라.</li>

<li>그래서는 안되는 일이 일어나는가?  프로그램에서 그 함수를 수행하는 코드를 찾아라 그리고 그래서는 안될 때 그 함수가 실행되는 지를 살펴보라.</li>

<li>예상하지 못한 효과를 산출하는 코드 조각이 있는가? 의문의 그 코드를 이해하고 있는지 확인하라. 특히 그 코드가 다른 파이썬 모듈에 있는 메쏘드나 함수를 요청하는 것과 연루되어 있는지를 확인하라. 요청하고 있는 함수들에 대한 문서를 읽어라. 간단한 테스트 사례를 작성하여 그 결과를 확인함으로써 그 함수들을 시험해 보라.</li>

</ul>

<p>
프로그래밍을 하기 위해서 프로그램이 작동하는 방법에 대한 정신적 모형을 가질 필요가 있다. 예상치 못한 행위를 하는 프로그램을 작성한다면, 상당부분의 문제는 그 프로그램에 있지 않다; 문제는 여러분의 정신적 모형에 있는 것이다.</p>

<p>
여러분의 정신적 모형을 교정하는 가장 좋은 방법은 프로그램을 구성요소들로 쪼개어 (보통은 함수와 메쏘드이다) 각 구성요소를 독립적으로 테스트하는 것이다. 여러분의 정신 모형과 현실사이에 불일치를 발견하기만 하면, 문제를 해결할 수 있다.</p>

<p>
물론, 구성요소들을 구축하고 테스트하면서 프로그램을 개발해야 할 것이다. 혹시 에러에 마주칠지라도 옳지 않다고 여겨지는 코드는 아주 적은 양의 새로운 코드만이 되어야 할 것이다.</p>

<h4>거대하고 조잡한 표현식이 있는데 예상한대로 행동하지 않아요.</h4>
<p>
복잡한 표현식을 작성하는 것은 읽을 수 있기만 하다면 괜찮다. 그러나 그것은 디버그하기가 어려울 수 있다. 복잡한 표현식을 임시 변수에다 일련의 할당문들로 쪼개는 것이 때로는 좋은 생각이다.</p>

<p>예를 들면:</p>


<p><span class=code>self.hands[i].addCard (self.hands[self.findNeighbor(i)].popCard())
<br></span></p>



<p>이것은 다음과 같이 작성될 수 있다:</p>


<p><span class=code> neighbor = self.findNeighbor (i)
<br> pickedCard = self.hands[neighbor].popCard()
<br> self.hands[i].addCard (pickedCard)
<br></span></p>

<p>
명시적인 버전이 읽기가 더 쉽다. 그 이유는 변수 이름 자체가 추가로 문서를 제공하기 때문이다. 명시적인 버전은 디버그하기가 더 쉽기도 하다. 그 이유는 간접적인 변수들의 유형을 점검할 수 있고 그 값들을 출력할 수 있기 때문이다.</p>
<p>
거대한 표현식에서 일어날 수 있는 또 다른 문제는 평가의 순서가 예상한대로가 아닐 수가 있다는 것이다. 예를 들어, 다음의 표현식 <tt><table style="display: inline; vertical-align: middle;"><tr><td>x</td></tr><tr><td><hr noshade color=black></td></tr><tr><td>2 pi</td></tr></table></tt> 파이썬으로 번역한다면 다음과 같이 작성할지도 모른다:</p>


<p><span class=code>y = x / 2 * math.pi;
<br></span></p>

<p>
곱셈과 나눗셈이 같은 우선순위를 가지고 있으며 왼쪽에서 오른쪽으로 평가되기 때문에 이것은 옳지 않다. 그래서 이 표현식은 <tt>x pi / 2</tt>이라고 계산한다.</p>
<p>
표현식을 디버그하는 좋은 방법은 괄호를 추가하여 평가의 순서를 명시하는 것이다:</p>


<p><span class=code> y = x / (2 * math.pi);
<br></span></p>



<p>
평가의 순서를 확신할 수 없을 때마다 괄호를 사용하라. 그 프로그램은 (여러분이 의도하는 바를 실행한다는 의미에서) 정확하게 될 뿐만 아니라, 또한 우선순위의 규칙을 기억하지 못하는 다른 사람들이 더욱 읽기 쉬울 것이다.</p>

<h4>함수 혹은 메쏘드가 예상한 것을 돌려주지 않아요.</h4>

<p>
복잡한 표현식을 가진 <span class=code><span class=keyword>return</span></span> 서술문이 있다면, 반환되기 전에 반환(<span class=code><span class=keyword>return</span></span>) 값을 출력해 볼 기회가 없다. 바로 여기에서 임시 변수를 사용할 수 있다. 예를 들어 다음과 같은 것 대신에:</p>


<p><span class=code><span class=keyword>return</span> self.hands[i].removeMatches()
<br></span></p>



<p>다음과 같이 작성할 수 있다:</p>


<p><span class=code>count = self.hands[i].removeMatches()
<br><span class=keyword>return</span> count
<br></span></p>
<p>
이제 반환전에 <span class=code>count</span>를 출력할 (또는 인쇄할) 기회가 있다.</p>

<h4>진짜로 정말 미치겠어요. 도움이 필요해요</h4>

<p>
먼저, 컴퓨터로부터 잠시동안 떨어져 있도록 하라. 컴퓨터는 뇌에 영향을 미치는 전파를 발산하여, 다음의 증상을 유발한다:</p>

<ul>

<li>좌절과 그리고/또는 분노.</li>
<li>
미신적인 믿음 ("컴퓨터는 나를 증오한다") 그리고 마법적인 생각 ("내가 모자를 거꾸로 쓰면 프로그램이 작동한다").</li>
<li>
마음가는대로-걷기 프로그래밍 (모든 가능한 프로그램을 작성하고 올바를 일을 하는 프로그램 하나를 선택함으로써 프로그램하려는 시도).</li>
</ul>
<p>
이러한 증상들 때문에 고민하는 자신을 발견한다면 일어나 밖으로 나아가 산책을 하라. 마음이 가라 앉으면 프로그램에 대해 생각하라. 그 프로그램은 무엇을 하고 있는가? 어떤 원인이 그러한 행위를 일으킬 가능성이 있는가? 가장 마지막으로 프로그램이 제대로 작동했던 때는 언제인가. 그리고 그 다음에 여러분은 무엇을 했는가?</p>
<p>
어떤 때는 버그를 발견하는 데 시간이 많이 걸린다. 가끔 컴퓨터에서 떨어져서 마음을 편하게 할 때 버그를 발견하기도 한다. 버그를 발견하기에 제일 좋은 장소는 열차안, 샤워할 때, 그리고 잠들기 바로 전 침대에 누워 있을 때이다.</p>

<h4>아니오, 진짜로 도움이 필요해요.</h4>
<p>
그럴 것이다. 심지어는 특급 프로그래머들도 가끔씩 고민에 빠진다. 어떤 때는 너무 오랫동안 프로그램 작업을 하기 때문에 에러가 눈에 보이지 않을 정도이다. 눈에 상쾌한 바람을 한 번 쐬어 주는 것이 유일한 해결책이다.</p>
<p>
다른 누군가를 부르기 전에, 먼저 이 부록에서 기술한 테크닉을 다 써 보았는지 확인하라. 프로그램은 가능한 한 간단해야 하며, 입력은 에러를 야기하므로 최소한으로 하여 작업해야 한다. 적절한 장소에 <span class=code><span class=keyword>print</span></span> 서술문을 배치해야 한다 (그리고 그 출력들은 이해가 되어야 한다). 문제를 간결하게 기술할 수 있을 만큼 충분히 이해해야 한다.</p>
<p>
누군가를 불러서 도움을 요청한다면, 확실하게 그가 필요한 정보를 주어라:</p>
<ul>
<li>
에러 메시지가 있다면, 그것이 무엇이고 프로그램에서 어느 부분을 가르키고 있는가?</li>
<li>
이 에러 메시지가 발생하기 전에 가장 마지막으로 한 일은 무엇인가? 가장 마지막에 작성한 코드는 무엇인가, 또는 실패한 새로운 테스트 사례는 무엇인가?</li>

<li>지금까지 어떠한 노력을 하였는가, 그리고 무엇을 배웠는가?</li>
</ul>
<p>
버그를 발견하면, 어떻게 했으면 그 버그를 더 빨리 발견할 수 있었을지 잠시 생각해 보라. 다음에 비슷한 어떤 것을 발견하면 그 버그를 더 빨리 발견할 수 있을 것이다.</p>
<p>
기억하라, 목표는 프로그램을 그저 작동하게 하는 데에 있지 않다. 목표는 프로그램을 작동하게 하는 법을 배우는 것이다.</p>

<p>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="app02.htm"><img border="0" alt="Next" src="images/next.png"></a></td>
    <td width="20" class=head><a href="index.htm"><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="chap21.htm"><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png"></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
    <td width="20" class=head><a href="dex.htm"><img border="0" alt="Index" src="images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png"></td>
  </tr>
</table>
<hr>

</body>
</html>
