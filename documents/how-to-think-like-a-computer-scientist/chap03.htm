<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>제 3 장 : 함수</title>
<META http-equiv=Content-Type content="text/html; charset=utf-8">

<style type="text/css">
<!--
body {background-color: white; color: black;}
a {background-color: white; color: blue; text-decoration: underline;}
a:hover {text-decoration: none;}
td.head,td.headcenter {background-color: #99ccff; color: black;}
td.headcenter {width: 100%; text-align: center;}
img {border-style: none;}
-->
</style>


<style type="text/css">
<!--
.code {font-family: Courier; font-size: 85%;}
.keyword {color: #0000ff;}
.comment {color: #008000;}
.quote {color: #ff0000;}
.function {color: #0000ff;}
-->
</style>

</head>

<body>

<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap04.htm" ><img border="0" alt="Next" src="./images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="./images/up.png" ></a></td>
    <td width="20" class=head><a href="chap02.htm" ><img border="0" alt="Previous" src="./images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="./images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="./images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="./images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="./images/blank.png" ></td>
  </tr>
</table>
<hr>


<h2>제 3 장</h2>

<h1>함수</h1>


<a name=1></a><br>
<h3>3.1 함수 호출(Function calls)</h3>

<p>이미 함수 호출(<b>function call</b>)의 한 예를 보았습니다:</p>


<p><span class=code>&gt;&gt;&gt; type(<span class=quote>"32"</span>)
<br>&lt;type <span class=quote>'string'</span>>
<br></span></p>

<p>
이 함수의 이름은 <span class=code>type</span>입니다. 이 함수는 변수 또는 값의 유형을 표시합니다. 값은 괄호로 둘러 싸서 함수에 건넬 수 있는데 이것을 함수의 인자(<b>argument</b>)라고 부릅니다. 함수는 인자를 "받고(takes)" 결과를 "돌려준다(returns)"라고 흔히 말합니다. 그 결과는 반환 값(<b>return value</b>)이라고 부릅니다.</p>
<p>
반환 값을 인쇄하는 대신에 변수에 할당할 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; betty = type(<span class=quote>"32"</span>)
<br>&gt;&gt;&gt; <span class=keyword>print</span> betty
<br>&lt;type <span class=quote>'string'</span>>
<br></span></p>

<p>
또 다른 예로서 <span class=code>id</span> 함수는 값 또는 변수를 받고 그 값에 대한 유일한 식별자로 작용하는 정수를 반환합니다:</p>


<p><span class=code>&gt;&gt;&gt; id(3)
<br>134882108
<br>&gt;&gt;&gt; betty = 3
<br>&gt;&gt;&gt; id(betty)
<br>134882108
<br></span></p>

<p>
모든 값은 각자 신분번호(<span class=code>id</span>)가 있습니다. 신분번호는 값이 저장된 컴퓨터 메모리의 위치를 가리키는 유일한 숫자입니다. 변수의 신분번호(<span class=code>id</span>)는 그 변수가 가리키는 값의 신분번호(<span class=code>id</span>)입니다.</p>

<a name=2></a><br>
<h3>3.2 유형 변환(Type conversion)</h3>
<p>
파이썬은 값을 하나의 유형에서 다른 유형으로 변환하는 내장함수 집단을 제공합니다. <span class=code>int</span> 함수는 어떤 값이라도 취해 되도록이면 그것을 정수로 변환합니다. 그렇지 않으면 불평합니다:</p>


<p><span class=code>&gt;&gt;&gt; int(<span class=quote>"32"</span>)
<br>32
<br>&gt;&gt;&gt; int(<span class=quote>"Hello"</span>)
<br>ValueError: invalid literal <span class=keyword>for</span> int(): Hello
<br></span></p>



<p><span class=code>int</span>는 부동-소수점 값도 정수로 변환할 수 있습니다. 그러나 분수 부분은 잘라 버린다는 것을 기억하세요:</p>


<p><span class=code>&gt;&gt;&gt; int(3.99999)
<br>3
<br>&gt;&gt;&gt; int(-2.3)
<br>-2
<br></span></p>



<p>
<span class=code>float</span> 함수는 정수와 문자열을 부동-소수점수로 변환합니다:</p>


<p><span class=code>&gt;&gt;&gt; float(32)
<br>32.0
<br>&gt;&gt;&gt; float(<span class=quote>"3.14159"</span>)
<br>3.14159
<br></span></p>



<p>
마지막으로 <span class=code>str</span> 함수는 <span class=code>string</span> 유형으로 변환됩니다:</p>


<p><span class=code>&gt;&gt;&gt; str(32)
<br><span class=quote>'32'</span>
<br>&gt;&gt;&gt; str(3.14149)
<br><span class=quote>'3.14149'</span>
<br></span></p>



<p>
파이썬이 정수값 <span class=code>1</span>과 부동-소수점 값 <span class=code>1.0</span>을 구별한다는 것이 이상하게 보일지도 모르겠습니다. 같은 숫자를 나타내기는 하지만, 그 둘은 컴퓨터 내부에서 서로 다르게 표현되기 때문에 서로 유형이 다릅니다.</p>

<a name=3></a><br>
<h3>3.3 유형 강제변환(Type coercion)</h3>
<p>
이제 유형 사이를 변환할 수 있으므로, 또 다른 방법으로 정수 나눗셈을 다룰 수 있습니다. 이전 장의 예제로 되돌아가 한 시간중에 몇 분이 지나갔는지 계산하기를 원한다고 가정해 보세요. 가장 확실한 표현은 <span class=code>minute / 60</span>인데, 정수 계산을 합니다. 그래서 그 결과는 항상 0입니다. 심지어는 그 시간이 59분이나 지났는데도 말입니다.</p>

<p>
한가지 해결책은 <span class=code>minute</span>를 부동-소수점수로 변환하고 부동-소수점 나눗셈을 하는 것입니다:</p>


<p><span class=code>&gt;&gt;&gt; minute = 59
<br>&gt;&gt;&gt; float(minute) / 60.0
<br>0.983333333333
<br></span></p>



<p>
다른 방법으로는 자동적인 유형 강제변환에 대한 규칙을 이용할 수 있습니다. 이것을 유형 강제변환(<b>type coercion</b>)이라고 부릅니다. 수학 연산자들에 대하여, 만약 둘 중에 한 피연산자가 <span class=code>float</span>라면, 다른 피연산자는 자동적으로 <span class=code>float</span>으로 변환됩니다:</p>


<p><span class=code>&gt;&gt;&gt; minute = 59
<br>&gt;&gt;&gt; minute / 60.0
<br>0.983333333333
<br></span></p>



<p>
분모를 <span class=code>float</span>로 만들면, 강제로 파이썬에게 부동-소수점 나눗셈을 시킬 수 있습니다.</p>

<a name=4></a><br>
<h3>3.4 수학 함수(Math functions)</h3>
<p>
수학에서 <span class=code>sin</span>과 <span class=code>log</span>같은 함수들을 보셨을 것입니다. 그리고 <span class=code>sin(pi/2)</span>과 <span class=code>log(1/x)</span>같은 표현식을 평가하는 법을 배우셨을 것입니다. 먼저 괄호 안에 있는 표현식(인자)을 평가합니다.  예를 들어, <span class=code>pi/2</span>는 대략 1.571이고, <span class=code>1/x</span>는 0.1입니다 (만약 <span class=code>x</span>가 혹시 10.0이 되면 말입니다).</p>

<p>
그리고나서 그 함수 자체를 평가합니다. 계산표에서 그것을 찾아 보거나 또는 다양한 계산을 수행함으로써 말입니다. 1.571의 <span class=code>sin</span> 값은 1입니다, 그리고 0.1의 <span class=code>log</span> 값은 -1입니다 (<span class=code>log</span>가 로그 밑수를 10으로 나타낸다면 말입니다).</p>
<p>
이런 처리과정은 반복적으로 적용될 수 있어서 <span class=code>log(1/sin(pi/2))</span>와 같이 더 복잡한 표현식들도 평가할 수 있습니다. 먼저, 가장 안쪽 함수의 인자를 평가합니다. 그리고 나서 그 함수를 평가합니다, 등등.</p>
<p>
파이썬에 있는 수학 모듈은 친숙한 수학적 함수들을 대부분 제공합니다. <b>모듈(module)</b>은 관련된 함수의 집단을 함께 무리지어 가지고 있는 파일입니다.</p>
<p>
모듈로부터 함수를 꺼내어 사용하려면, 먼저 그것을 반입해야 합니다:</p>


<p><span class=code>&gt;&gt;&gt; <span class=keyword>import</span> math
<br></span></p>

<p>
함수를 호출하려면 모듈의 이름과 함수의 이름을 점으로 구분지어 지정해야 합니다. 점은 마침표입니다. 이러한 형식을 점 표기법(<b>dot notation</b>)이라고 부릅니다.</p>



<p><span class=code>&gt;&gt;&gt; decibel = math.log10 (17.0)
<br>&gt;&gt;&gt; angle = 1.5
<br>&gt;&gt;&gt; height = math.sin(angle)
<br></span></p>



<p>
첫 번째 서술문은 <span class=code>decibel</span>에 로그 17을 설정합니다, 밑수는 <span class=code>10</span>입니다. 또 <span class=code>log</span>라고 부르는 함수도 있는데 밑수를 <span class=code>e</span>로 하는 로그를 취합니다.</p>

<p>
세 번째 서술문은 <span class=code>angle</span> 변수의 사인 값을 찾습니다. <span class=code>sin</span>과 다른 삼각 함수들(<span class=code>cos</span>, <span class=code>tan</span>, 등등.)은 호도(radians)로 된 인자들을 취합니다. 각도(degrees)를 호도(radians)로 변환하려면, 360으로 나누고 <span class=code>2*pi</span>를 곱하세요. 예를 들어, 사인 45도의 값을 찾으려면, 먼저 각도를 호도로 계산하고 나서 그 사인 값을 취하세요:</p>


<p><span class=code>&gt;&gt;&gt; degrees = 45
<br>&gt;&gt;&gt; angle = degrees * 2 * math.pi / 360.0
<br>&gt;&gt;&gt; math.sin(angle)
<br></span></p>



<p>
상수 <span class=code>pi</span> 역시 수학(math) 모듈의 일부입니다. 기하학을 잘 아신다면 2의 제곱근을 2로 나눈 값과 비교해 보면 그 결과를 확인할 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; math.sqrt(2) / 2.0
<br>0.707106781187
<br></span></p>



<a name=5></a><br>
<h3>3.5 작성(Composition)</h3>
<p>
수학 함수와 마찬가지로 파이썬 함수를 작성할 수 있습니다. 즉, 표현식의 일부에 또 표현식을 사용할 수 있다는 뜻입니다. 예를 들어, 함수에 어떠한 표현식도 인자로 사용할 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; x = math.cos(angle + pi/2)
<br></span></p>

<p>
이 서술문은 <span class=code>pi</span>의 값을 받아서 2로 나누고 그 결과를 <span class=code>angle</span> 값에 더합니다. 그리고 나서 그 합은 인자로 <span class=code>cos</span> 함수에 건네집니다.</p>

<p>
함수의 결과를 취해서 그것을 또 다른 함수에 인자로 건네줄 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; x = math.exp(math.log(10.0))
<br></span></p>


<p>
이 서술문은 밑수가 <span class=code>e</span>인 로그 10을 찾아서 <span class=code>e</span>를 그 지수까지 거듭제곱 합니다. 그 결과는 <span class=code>x</span>에 할당됩니다.</p>

<a name=6></a><br>
<h3>3.6 새로운 함수를 추가하기</h3>
<p>
지금까지는 파이썬에 딸려오는 함수만을 사용했습니다. 그러나 새로운 함수를 추가할 수도 있습니다. 범용-목적의 프로그래밍 언어에 대하여 가장 유용한 것중의 하나는 새로운 함수를 만들어서 여러분 만의 특별한 문제를 푸는 것입니다.</p>

<p>
프로그래밍의 관점에서 함수(<b>function</b>)는 원하는 연산을 수행하는, 이름이 주어진 일련의 서술문들입니다. 이러한 연산은 함수 정의(<b>function definition</b>)에서 지정됩니다. 지금까지 사용한 함수들은 우리를 대신하여 정의되어 있으며, 이러한 정의들은 보이지 않습니다. 이것은 좋은 일입니다. 왜냐하면 그 덕분에 정의에 대한 세부사항을 걱정할 필요없이 함수들을 사용할 수 있기 때문입니다. 
</p>



<p>함수 정의를 위한 구문은 이렇습니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>NAME</span>( LIST OF PARAMETERS ):
<br>  STATEMENTS
<br></span></p>

<p>
만들고자 하는 함수에 대하여 어떤 이름도 지을 수 있습니다. 단지 파이썬의 키워드를 이름으로 사용할 수 없다는 점만 빼고 말입니다.  매개변수 리스트에는 무슨 정보를 제공하여야 그 새로운 함수를 사용할 수 있는지를 지정합니다.</p>
<p>
함수 안에는 서술문의 개수에 제한이 없습니다. 그러나 왼쪽 여백으로부터 들여쓰기 되어야 합니다. 이 책의 예제에서는 공백 두 개를 들여쓰기로 사용할 것입니다.</p>
<p>
작성하려고 하는 첫 번째 두 함수들에는 매개변수가 전혀 없습니다. 그래서 그 구문은 이렇게 보입니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>newLine</span>():
<br>  <span class=keyword>print</span>
<br></span></p>



<p>
이 함수의 이름은 <span class=code>newLine</span>입니다. 빈 괄호는 아무런 매개변수도 없음을 나타냅니다. 오직 한 개의 서술문만 있으며 새줄(newline) 문자를 결과로 출력합니다. (이것은 아무런 인자 없이 <span class=code><span class=keyword>print</span></span> 명령어를 사용하면 일어납니다.)</p>
<p>
새로운 함수를 호출하는 구문은 내장 함수에 대한 구문과 똑 같습니다:</p>


<p><span class=code><span class=keyword>print</span> <span class=quote>"First Line."</span>
<br>newLine()
<br><span class=keyword>print</span> <span class=quote>"Second Line."</span>
<br></span></p>



<p>이 프로그램의 출력결과는 이렇습니다:</p>


<p><span class=code>First line.
<br>
<br>Second line.
<br></span></p>

<p>
두 줄 사이에 있는 여분의 공백을 주목하세요. 줄 사이에 더 많은 공백을 원하면 어떻게 되는가?  같은 함수를 반복적으로 호출하면 됩니다:</p>


<p><span class=code><span class=keyword>print</span> <span class=quote>"First Line."</span>
<br>newLine()
<br>newLine()
<br>newLine()
<br><span class=keyword>print</span> <span class=quote>"Second Line."</span>
<br></span></p>

<p>
또는 <span class=code>threeLines</span>라는 이름의 함수를 새로 만들어서, 줄 세 개를 인쇄할 수도 있습니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>threeLines</span>():
<br>  newLine()
<br>  newLine()
<br>  newLine()
<br>
<br><span class=keyword>print</span> <span class=quote>"First Line."</span>
<br>threeLines()
<br><span class=keyword>print</span> <span class=quote>"Second Line."</span>
<br></span></p>

<p>
이 함수는 세 개의 서술문이 있습니다. 서술문 모두는 두 개의 공백만큼 들여쓰기 됩니다. 파이썬은 다음 서술문이 들여쓰기 되어 있지 않으므로, 함수의 부분이 아니라는 것을 압니다.</p>
<p>
이 프로그램에 대하여 몇 가지를 주목해야 합니다:</p>

<ol>

<li>같은 절차를 반복적으로 호출할 수 있다. 사실 대단히 흔한 일이며 그렇게 하는 것이 유용하다.</li>

<li>한 함수가 다른 함수를 호출하도록 할 수 있다; 이 경우에 <span class=code>threeLines</span>는 <span class=code>newLine</span>을 호출한다.</li>

</ol>
<p>
지금까지는 이런 모든 함수를 새로 만드는 것이 왜 수고할 만한 가치가 있는지 이해가 안 갈지도 모릅니다. 실제로 많은 이유가 있지만, 이 예제는 두 가지 이유를 보여줍니다:</p>

<ul>

<li>새로운 함수를 만들면 일단의 서술문에 이름을 줄 수 있다. 함수는 복잡한 계산을 하나의 명령어 뒤로 감추고 비밀스런 코드 대신에 영어 단어를 사용함으로써 프로그램을 간결하게 할 수 있다.</li>

<li>새로운 함수를 만들면 반복적인 코드가 줄어들어 프로그램을 더 작게 만들 수 있다. 간단하게 아홉 개의 새로운 줄을 연속적으로 인쇄하는 방법은 <span class=code>threeLines</span>를 세 번 호출하는 것이다.</li>

</ul>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, <span class=code>nineLines</span>라는 함수를 만들어서 <span class=code>threeLines</span>을 사용하여 아홉 개의 공백 줄을 인쇄해 보세요. 스물-일곱개의 줄을 어떻게 새로이 인쇄할까요?</i> </p>

<a name=7></a><br>
<h3>3.7 정의와 사용법</h3>

<p>
섹션 3.6에 있는 코드 조각들을 모아 합쳐 보면, 전체 프로그램은 이렇게 보입니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>newLine</span>():
<br>  <span class=keyword>print
<br>
<br>def</span> threeLines():
<br>  newLine()
<br>  newLine()
<br>  newLine()
<br>
<br><span class=keyword>print</span> <span class=quote>"First Line."</span>
<br>threeLines()
<br><span class=keyword>print</span> <span class=quote>"Second Line."</span>
<br></span></p>



<p>
이 프로그램에는 두개의 함수 정의가 있습니다: <span class=code>newLine</span>과 <span class=code>threeLines</span>가 그것입니다. 함수 정의는 다른 서술문과 똑 같이 실행됩니다. 그러나 그 효과는 새로운 함수를 만들어 내는 것입니다. 함수 안에 있는 서술문들은 그 함수가 호출되기 전까지는 실행되지 않습니다. 그리고 함수 정의는 아무것도 출력하지 않습니다.</p>
<p>
예상하듯이, 함수를 실행하기 전에 먼저 만들어야 합니다. 다른 말로 하면, 함수 정의가 먼저 실행되어야 처음으로 호출될 수 있습니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, 이 프로그램에서 마지막 세 줄을 처음으로 이동해 보세요. 함수 호출이 그 정의보다 먼저 나타나도록 말입니다. 프로그램을 실행하고 어떤 에러 메시지를 맞이하는지 살펴 보세요.</i> </p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>또 다른 연습으로, 작동하는 버전의 프로그램으로 시작해서 <span class=code>newLine</span>의 정의를 <span class=code>threeLines</span>의 정의 뒤로 옮겨 보세요. 이 프로그램을 실행하면 무슨 일이 일어납니까?</i> </p>

<a name=8></a><br>
<h3>3.8 실행의 흐름</h3>
<p>
함수를 사용하기 전에 먼저 정의되었는지 확인하기 위해서는 서술문이 실행되는 순서를 알 필요가 있습니다. 이것을 실행의 흐름(<b>flow of execution</b>)이라고 부릅니다.</p>
<p>
실행은 항상 프로그램의 첫 번째 서술문에서 시작합니다. 서술문들은 위로부터 아래의 순서로 한 번에 하나씩 실행됩니다.</p>
<p>
함수 정의는 프로그램의 실행 흐름을 변경시키지 않습니다. 그러나 기억할 것은 함수 안의 서술문들은 그 함수가 호출될 때 까지는 실행되지 않는다는 것입니다.  흔한 일은 아니지만, 한 함수를 또 다른 함수 안에 정의할 수 있습니다. 이 경우, 안 쪽의 정의는 바깥 쪽의 함수가 호출되기 전까지는 실행되지 않습니다.</p>
<p>
함수 호출은 실행의 흐름에서 우회로와 같은 것입니다. 다음 서술문으로 가는 대신에, 흐름은 호출된 함수의 첫 번째 라인으로 건너 뛰어 거기에 있는 모든 서술문들을 실행합니다. 그리고나서 자신이 떠났던 곳을 찾아 돌아옵니다.</p>
<p>
이야기는 참 쉽게 들립니다. 한 함수가 또 다른 함수를 호출할 수 있다는 사실을 기억하기 전까지는 말입니다. 한 함수의 중간에 있는 동안, 프로그램은 또 다른 함수에 있는 서술문들을 실행할 필요가 있을 수도 있습니다. 그러나 그 새로운 함수를 실행하고 있는 동안, 프로그램은 또 다른 함수를 또 실행할 필요가 있을 수도 있습니다!</p>
<p>
다행스럽게도, 파이썬은 능숙하게 실행 위치를 추적하여 유지합니다. 그래서 함수가 끝날 때 마다 프로그램은 자신을 호출한 함수에서 떠났던 위치를 찾아 냅니다. 프로그램의 마지막에 다다르면 실행은 끝이 납니다.</p>

<p>
이런 복잡한 이야기가 주는 교훈은 무엇인가? 프로그램을 읽을 때, 위에서부터 아래로 읽지 마세요. 대신에 실행의 흐름을 따르세요.</p>

<a name=9></a><br>
<h3>3.9 매개변수와 인자</h3>
<p>
어떤 내장 함수는 인자를 요구합니다. 인자란 함수가 자신의 일을 어떻게 할지를 제어하는 값입니다. 예를 들어, 만약 어떤 숫자의 사인 값을 알고자 한다면, 그 숫자가 무엇인지 가르켜 줄 필요가 있습니다. 그리하여, <span class=code>sin</span>은 수치 값을 인자로 취합니다.</p>
<p>
어떤 함수는 하나 이상의 인자를 취합니다. 예를 들어, <span class=code>pow</span>는 두 개의 인자를, 즉 밑수와 지수를 취합니다. 그 함수 안에서 건네지는 값은 매개변수(<b>parameters</b>)라고 부르는 변수에 할당됩니다.</p>

<p>
다음은 인자 하나를 취하는 사용자-정의 함수의 예입니다:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>printTwice</span>(bruce):
<br>  <span class=keyword>print</span> bruce, bruce
<br></span></p>



<p>
이 함수는 인자를 하나 취하고 그것을 <span class=code>bruce</span>라는 이름의 매개변수에 할당합니다. 그 매개변수의 값은 (이 시점에서 그것이 무엇이 될지는 모릅니다) 두 번 인쇄됩니다. 다음에 새줄문자(newline)가 따릅니다. <span class=code>bruce</span>라는 이름을 선택한 것은 매개변수에 주는 이름이 여러분에게 달렸다는 것을 보여주기 위해서입니다. 그러나 일반적으로 <span class=code>bruce</span>보다는 좀 더 설명적인 이름을 선택하고 싶을 것입니다.</p>

<p>
<span class=code>printTwice</span> 함수는 출력 가능한 어떤 종류의 유형과도 작동합니다:</p>


<p><span class=code>&gt;&gt;&gt; printTwice(<span class=quote>'Spam'</span>)
<br>Spam Spam
<br>&gt;&gt;&gt; printTwice(5)
<br>5 5
<br>&gt;&gt;&gt; printTwice(3.14159)
<br>3.14159 3.14159
<br></span></p>



<p>
첫 번째 함수 호출에서 인자는 문자열입니다. 두 번째에서는 정수이며, 세 번째에서는 소수(<span class=code>float</span>)입니다.</p>
<p>
내장 함수에 적용하는 작성의 규칙이 똑 같이 사용자-정의 함수에도 적용됩니다. 그래서 어떠한 종류의 표현식도 <span class=code>printTwice</span>에 대한 인자로 사용할 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; printTwice(<span class=quote>'Spam'</span>*4)
<br>SpamSpamSpamSpam SpamSpamSpamSpam
<br>&gt;&gt;&gt; printTwice(math.cos(math.pi))
<br>-1.0 -1.0
<br></span></p>



<p>
보통, 표현식은 함수가 실행되기 전에 평가됩니다. 그래서 <span class=code>printTwice</span>는 <span class=code><span class=quote>'Spam'</span>*4 <span class=quote>'Spam'</span>*4</span> 대신에 <span class=code>SpamSpamSpamSpam SpamSpamSpamSpam</span>을 돌려주니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, <span class=code><span class=quote>'Spam'</span>*4 <span class=quote>'Spam'</span>*4</span>를 돌려주도록 <span class=code>printTwice</span>를 호출해 보세요.  힌트: 문자열은 홑따옴표나 겹따옴표중 하나로 둘러쌀 수 있습니다. 그리고 문자열을 둘러싸는데 사용되지 않은 종류의 인용부호를 그 문자열 안에 사용할 수 있습니다.</i> </p>

<p>변수를 인자로 사용할 수도 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; latoya = <span class=quote>'Eric, the half a bee.'</span>
<br>&gt;&gt;&gt; printTwice(latoya)
<br>Eric, the half a bee. Eric, the half a bee.
<br></span></p>



<p>
여기에는 대단히 중요한 어떤 것이 있음을 주목하세요. 인자로 보내는 변수의 이름(<span class=code>latoya</span>)은 매개변수 (<span class=code>bruce</span>)의 이름과 전혀 관계가 없습니다. 그것이 원래 (호출자에게서) 무엇으로 불리웠는지는 아무 상관이 없습니다; 여기 <span class=code>printTwice</span>에서는 모두 <span class=code>bruce</span>라고 부릅니다.</p>

<a name=10></a><br>
<h3>3.10 변수와 매개변수는 모두 지역적이다</h3>

<p>
지역변수(<b>local variable</b>)를 함수 안에 만들면, 그 지역 변수는 그 함수 안에만 존재합니다. 바깥에서 그것을 사용할 수 없습니다. 예를 들어:</p>


<p><span class=code><span class=keyword>def</span> <span class=function>catTwice</span>(part1, part2):
<br>  cat = part1 + part2
<br>  printTwice(cat)
<br></span></p>



<p>
이 함수는 인자를 두 개 취합니다. 그 둘을 결합한 결과를 두 번 인쇄합니다. 문자열 두 개로 함수를 호출할 수 있습니다:</p>


<p><span class=code>&gt;&gt;&gt; chant1 = <span class=quote>"Pie Jesu domine, "</span>
<br>&gt;&gt;&gt; chant2 = <span class=quote>"Dona eis requiem."</span>
<br>&gt;&gt;&gt; catTwice(chant1, chant2)
<br>Pie Jesu domine, Dona eis requiem. Pie Jesu domine, Dona eis requiem.
<br></span></p>



<p>
<span class=code>catTwice</span>가 끝나면, <span class=code>cat</span> 변수는 파괴됩니다. 그것을 출력하려고 하면, 에러를 맞이합니다:</p>


<p><span class=code>&gt;&gt;&gt; <span class=keyword>print</span> cat
<br>NameError: cat
<br></span></p>



<p>
매개변수 역시 지역적입니다. 예를 들어, <span class=code>printTwice</span> 함수 바깥에 <span class=code>bruce</span>와 같은 것은 전혀 없습니다. 만약 그것을 사용하려고 하면, 파이썬은 불평을 할 것입니다.</p>

<a name=11></a><br>
<h3>3.11 스택 다이어그램</h3>
<p>
어느 변수가 어디에 사용될 수 있는지 추적 유지하려면, 스택 다이어그램(<b>stack diagram</b>)을 그리면 유용합니다. 상태 다이어그램(state diagrams)처럼 스택 다이어그램은 각 변수의 값을 보여 줍니다. 그러나 또한 각 변수가 속해 있는 함수도 보여 줍니다.</p>
<p>
각 함수는 틀(<b>frame</b>)로 표현됩니다. 틀은 옆에 함수의 이름이 있고 안에 그 함수의 변수들과 매개변수들이 있는 상자입니다. 앞의 예제에 대한 스택 다이어그램은 이렇게 보입니다:</p>

<p align="center"><img src="./illustrations/stack.png"></p>
<p>
스택의 순서는 실행의 흐름을 보여 줍니다.  <span class=code>printTwice</span>는 <span class=code>catTwice</span>에 의하여 호출되고, <span class=code>catTwice</span>는 <span class=code>__main__</span>에 의하여 호출되는데, <span class=code>__main__</span>은 최상위 함수에 대한 특별한 이름입니다. 어떤 함수의 바깥에 변수를 만들면, 그 변수는 <span class=code>__main__</span>에 속합니다.</p>
<p>
각 매개변수는 그에 상응하는 인자로서 같은 값을 참조합니다. 그래서, <span class=code>part1</span>은 <span class=code>chant1</span>과 값이 같고 <span class=code>part2</span>는 <span class=code>chant2</span>와 값이 같으며 그리고 <span class=code>bruce</span>는 <span class=code>cat</span>과 값이 같습니다.</p>
<p>
함수 호출중에 에러가 발생하면, 파이썬은 그 함수의 이름을 인쇄합니다. 그리고 그 함수를 호출한 함수의 이름을 인쇄합니다. 또 <i>그 함수를</i> 호출한 함수의 이름을 인쇄하고, 결국 모두 다 <span class=code>__main__</span>으로 되돌아 옵니다.</p>

<p>
예를 들어, <span class=code>printTwice</span> 안에서 <span class=code>cat</span>에 접근하려고 하면, <span class=code>NameError</span>를 맞이합니다:</p>


<p><span class=code>Traceback (innermost last):
<br>  File <span class=quote>"test.py"</span>, line 13, <span class=keyword>in</span> __main__
<br>    catTwice(chant1, chant2)
<br>  File <span class=quote>"test.py"</span>, line 5, <span class=keyword>in</span> catTwice
<br>    printTwice(cat)
<br>  File <span class=quote>"test.py"</span>, line 9, <span class=keyword>in</span> printTwice
<br>    <span class=keyword>print</span> cat
<br>NameError: cat
<br></span></p>

<p>
이러한 함수의 목록을 역추적(<b>traceback</b>)이라고 부릅니다. 역추적을 보고서 어떤 프로그램 파일에서 에러가 일어났는지, 그리고 어떤 줄에서 무슨 함수가 그 때에 실행되고 있었는지 알 수 있습니다. 또한 그 에러를 야기한 코드의 줄도 보여줍니다.</p>
<p>
역추적과 스택 다이어그램 사이의 유사성을 주목하세요. 그것은 어쩌다 일치한 것이 아닙니다.</p>

<a name=12></a><br>
<h3>3.12 결과를 돌려주는 함수</h3>

<p>
이정도면 어떤 함수들은 예를 들어 수학 함수와 같은 것들은 결과를 산출한다는 것을 눈치챘을 것입니다. <span class=code>newLine</span>과 같은 다른 함수들은 행위를 수행하기는 하지만, 값을 돌려주지 않습니다. 이점은 의문을 일으킵니다:</p>

<ol>

<li>
함수를 호출하고 결과값으로 아무것도 돌려주지 않는다면 무슨 일이 일어나는가 (그것을 변수에 할당하지도 않으면, 즉 더 큰 표현식의 일부에 그것을 사용한다면 어떤 일이 일어나는가)?</li>

<li>함수를 결과값 없이 표현식의 일부에 사용하지도 않는다면 무슨 일이 일어나는가? <span class=code>newLine() + 7</span>와 같이 말이다.</li>

<li>결과를 산출하는 함수들을 작성할 수 있는가? 또는 <span class=code>newLine</span>과 <span class=code>printTwice</span>같은 간단한 함수들이 따분한가?</li>

</ol>

<p>세 번째 질문에 대한 대답은 예입니다. 그것을 제 5 장에서 다루어 보겠습니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습으로, 다른 두 질문에 대해서도 시험해 보고 대답해 보세요. 무엇이 파이썬에서 적법한지 또는 불법한지에 대해 의문이 생기면, 해답을 찾는 훌륭한 방법은 파이썬 인터프리터에게 질문해 보는 것입니다.</i> </p>

<a name=13></a><br>
<h3>3.13 용어 해설</h3>

<dl>

<dt>함수 호출(function call)</dt>
<dd>함수를 실행하는 서술문. 그 구성은 함수의 이름이 오고 다음에 괄호에 싸인 인자들의 목록이 온다.</dd>

<dt>인자(argument)</dt>
<dd>함수가 호출될 때 제공되는 값. 이 값은 그 함수에서 그에 상응하는 매개변수에 할당된다.</dd>

<dt>반환 값(return value)</dt>
<dd>함수의 결과. 만약 함수 호출이 표현식으로 사용되면, 반환 값은 그 표현식의 값이다.</dd>

<dt>유형 변환(type conversion)</dt>
<dd>한 값의 형을 취하고 그에 맞추어 또 다른 형의 값을 계산하는 명시적인 서술문.</dd>

<dt>유형 강제변환(type coercion)</dt>
<dd>파이썬의 강제 변환 규칙에 맞추어 자동적으로 일어나는 유형 변환.</dd>

<dt>모듈(module)</dt>
<dd>관련된 함수와 클래스의 집단이 모인 파일.</dd>

<dt>점 표기법(dot notation)</dt>
<dd>다른 모듈에 있는 함수를 호출하기 위한 구문. 모듈 이름을 지정하고 다음에 점이 따르고 그리고 함수 이름이 따른다.</dd>

<dt>함수(function)</dt>
<dd>어떤 유용한 연산을 수행하는, 이름지어진 일련의 서술문들. 함수는 매개변수를 취해도 안 취해도 좋다. 결과를 산출해도 안 해도 좋다.</dd>

<dt>함수 정의(function definition)</dt>
<dd>새로운 함수를 만드는 서술문. 이름과 매개변수 그리고 실행할 서술문들을 지정한다.</dd>

<dt>실행의 흐름(flow of execution)</dt>
<dd>프로그램이 실행되는 동안에 서술문들이 실행되는 순서.</dd>

<dt>parameter</dt>
<dd>함수 안에 사용되어 인자로 건네지는 값을 가리키는 이름.</dd>

<dt>지역 변수(local variable)</dt>
<dd>함수 안에 정의된 변수. 지역 변수는 그 함수 안에서만 사용할 수 있다.</dd>

<dt>스택 다이어그램(stack diagram)</dt>
<dd>쌓여진 함수들. 함수의 변수와 그 변수들이 가르키는 값을 그래픽으로 표현한 것.</dd>

<dt>틀(frame)</dt>
<dd>함수 호출을 표현하는 스택 다이어그램 안의 네모상자. 거기에는 지역 변수와 그 함수의 매개변수가 있다.</dd>

<dt>역추적(traceback)</dt>
<dd>실행되고 있는 함수의 목록. 실행시간 에러가 일어나면 인쇄된다.</dd>



</dl>
<h2>연습문제</h2>
<ol>
<li><div class="exercise">
텍스트 편집기를 사용하여, 이름이 <code>tryme3.py</code>인 파이썬 스크립트를 만들어라. 이 파일 안에 <code>nine_lines</code>이라는 함수를 만들어라. 이 함수는 <code>three_lines</code>을 사용하여 아홉 개의 빈 줄을 인쇄한다.  이제 <code>clear_screen</code>라는 함수를 추가하라. 이 함수는 스물-다섯 개의 빈 줄을 인쇄한다. 프로그램에서 마지막 줄은 반드시 <code>clear_screen</code>를 호출(<em>call</em>)해야 한다.
</div></li>

<li><div class="exercise">
<code>tryme3.py</code>의 마지막 줄을 프로그램의 최상위로 옮겨라. 그래서 함수 정의(<em>function definition</em>) 전에 <code>clear_screen</code>에 대한 함수 호출(<em>function call</em>)이 먼저 나타나도록 말이다. 프로그램을 실행하고 어떤 에러 메시지가 나타나는지 기록하라. 프로그램에서 서로 상대적으로 어디에 나타날 수 있는지 기술하는 함수 정의(<em>function definitions</em>)와 함수 호출(<em>function calls</em>)에 관하여 규칙을 말할 수 있는가?
</div></li>

<li><div class="exercise">
작동하는 <code>tryme3.py</code> 버전을 가지고 시작하기 전에, <code>new_line</code>의 정의를 <code>three_lines</code>의 정의 뒤로 옮겨라. 이 프로그램을 실행하면 무슨 일이 일어나는지 기록하라. 이제 <code>new_line</code>의 정의를 <code>three_lines()</code>에 대한 호출 아래로 옮겨라. 왜 이것이 앞 연습문제에서 말했던 규칙의 예가 되는지 설명하라.
</div></li>

<li><div class="exercise">
<p>
<code>cat_n_times</code>에 대하여 함수 정의의 몸체를 채워라. 그래서 문자열 s를 n 번 인쇄하도록 말이다:</p>
<pre class="python">
def cat_n_times(s, n):
    &lt;fill in your code here&gt;
</pre>
<p>
이 함수를 이름이 <code>import_test.py</code>인 스크립트에 저장하라. 이제 유닉스 프롬프트에서 <code>import_test.py</code>가 위치한 디렉토리와 같은 디렉토리에 있는지 확인하라 (<code>ls</code>를 사용하면 <code>import_test.py</code>를 보여줄 것이다).  파이썬 쉘을 시작하고 다음을 시도해 보라:</p>
<pre class="python-interpreter">
&gt;&gt;&gt; from import_test import *
&gt;&gt;&gt; cat_n_times('Spam', 7)
SpamSpamSpamSpamSpamSpamSpam
</pre>
<p>
모든 것이 잘 되었으면, 세션은 다음과 같을 것이다. 어떻게 작동하는지 익숙해질 때까지 <code>cat_n_times</code>에 다르게 호출해 보라.</p>
</div></li>
</ol>

<p>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap04.htm" ><img border="0" alt="Next" src="./images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="./images/up.png" ></a></td>
    <td width="20" class=head><a href="chap02.htm" ><img border="0" alt="Previous" src="./images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="./images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="./images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="./images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="./images/blank.png" ></td>
  </tr>
</table>
<hr>

</body>
</html>