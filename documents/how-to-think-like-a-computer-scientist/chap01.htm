<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>제 1 장 : 프로그램의 방법</title>
<META http-equiv=Content-Type content="text/html; charset=utf-8">

<style type="text/css">
<!--
body {background-color: white; color: black;}
a {background-color: white; color: blue; text-decoration: underline;}
a:hover {text-decoration: none;}
td.head,td.headcenter {background-color: #99ccff; color: black;}
td.headcenter {width: 100%; text-align: center;}
img {border-style: none;}
-->
</style>


<style type="text/css">
<!--
.code {font-family: Courier; font-size: 85%;}
.keyword {color: #0000ff;}
.comment {color: #008000;}
.quote {color: #ff0000;}
.function {color: #0000ff;}
-->
</style>
</head>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap02.htm"><img border="0" alt="Next" src="images/next.png" ></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="contrib.htm" ><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
  </tr>
</table>
<hr>


<h2>제 1 장</h2>

<h1>프로그래밍의 방법</h1>
<p>
이 책의 목적은 컴퓨터 과학자 같이 생각하는법을 가르치는 것입니다. 이러한 사고 방식에는 수학과 공학 그리고 자연 과학의 탁월한 특징들이 결합되어 있습니다. 수학자처럼 형식 언어를 사용하여 아이디어(특히 계산문제)를 표현합니다. 공학자처럼 사건들을 디자인해서 구성요소들을 시스템으로 조립해 넣고 여러 대안들 사이의 교환관계를 평가합니다. 과학자처럼 복잡한 시스템의 행위를 관찰하고 가설을 세우며 예측한 조건들을 테스트합니다.</p>
<p>
컴퓨터 과학자에게 있어서 가장 중요하고 유일한 기술은 문제 해결(<b>problem solving</b>)입니다. 문제 해결이란 문제를 형성하고 가능한 해답들에 관하여 창조적으로 생각하여 해답을 정확하고 명료하게 표현하는 능력을 뜻합니다. 프로그래밍을 배우는 과정은 문제-해결의 기술을 연마할 수 있는 좋은 기회입니다. 그것이 바로 이 장을 "프로그래밍의 방법"이라고 부르는 이유입니다.</p>
<p>
한편으로는 그 자체로 유용한 기술인 프로그래밍을 배우게 될 것이며, 또 한편으로는 목적을 위한 수단으로 프로그래밍을 이용할 것입니다. 앞으로 나아가다 보면, 그 목적이 더욱 뚜렷하게 드러나게 될 것입니다.</p>

<a name=1></a><br>
<h3>1.1 파이썬 프로그래밍 언어</h3>
<p>
앞으로 배우게 될 프로그래밍 언어는 파이썬입니다. 파이썬은 높은-수준의 언어(<b>high-level language</b>)의 한 예입니다; 일찍이 들어 보았을 다른 고-수준 언어로는 C, C++, Perl, 그리고 Java가 있습니다.</p>
<p>
"높은-수준의 언어"라는 이름에서 짐작하겠지만, 또한 낮은-수준의 언어(<b>low-level languages</b>)도 있는데, 때로는 "기계 언어(machine languages)" 또는 "어셈블리 언어(assembly languages)"라고 지칭되기도 합니다. 느슨하게 이야기 해서, 컴퓨터는 오직 저-수준 언어로 작성된 프로그램만을 실행할 수 있습니다. 그러므로, 고-수준 언어로 작성된 프로그램은 먼저 처리를 거쳐야만 실행될 수 있습니다. 이러한 여분의 처리과정은 약간 시간이 걸리며, 이것은 고-수준 언어가 가지는 작은 단점입니다.</p>
<p>
그러나 장점은 방대합니다. 첫 째로, 고-수준 언어로는 더 쉽게 프로그램할 수 있습니다. 고-수준 언어로 작성된 프로그램은 작성하는 시간이 덜 걸리고 더 빠르게 그리고 더 쉽게 읽을 수 있으며 그리고 더 쉽게 교정될 수 있습니다. 두 번째로, 고-수준 언어는 이식성(<b>portable</b>)이 있습니다. 이것은 곧 서로 다른 종류의 컴퓨터에서 최소한의 수정으로도 실행될 수 있다는 것을 뜻합니다. 저-수준 프로그램은 오로지 한 종류의 컴퓨터에서만 실행될 수 있으며 다른 컴퓨터에서 실행되려면 다시 작성되어야 합니다.</p>
<p>
이러한 장점들 덕분에, 거의 모든 프로그램은 고-수준 언어로 작성됩니다. 저-수준 언어는 특별한 어플리케이션에만 사용될 뿐입니다.</p>
<p>
두 종류의 프로그램이 고-수준 언어를 저-수준 언어로 처리합니다: 인터프리터(<b>interpreters</b>)와 컴파일러(<b>compilers</b>)가 그것입니다. 인터프리터는 고-수준 프로그램을 읽어서 그것을 실행하는데, 이것은 그 프로그램이 요구하는 바를 하여준다라는 것을 뜻합니다. 인터프리터는 줄을 읽고 계산을 수행하고를 반복하면서 프로그램을 한 번에 약간씩 처리합니다.</p>

<p align="center"><img src="illustrations/interpret.png"></p>

<p>컴파일러는 프로그램을 읽어서 실행을 시작하기 전에 그것을 완전히 번역합니다. 이 경우에, 고-수준 프로그램을 소스 코드(<b>source code</b>)라고 부르며, 번역된 프로그램을 오브젝트 코드(<b>object code</b>) 혹은 실행가능코드(<b>executable</b>)라고 부릅니다. 프로그램이 한번 컴파일되면, 그것을 더이상 번역할 필요없이 반복적으로 실행할 수 있습니다.</p>

<p align="center"><img src="illustrations/compile.png"></p>

<p>
파이썬은 인터프리터에 의해 실행되므로 인터프리터 언어라고 간주됩니다. 두 가지 방법으로 파이썬을 사용할 수 있습니다: 명령어-라인 모드(command-line mode)와 스크립트 모드(script mode)가 그것입니다. 명령어-라인 모드에서 파이썬 프로그램을 타자하면 파이썬은 그 결과를 출력합니다:</p>


<p><span class=code>$ python
<br>Python 1.5.2 (<span class=comment>#1, Feb 1 2000, 16:32:16)
</span><br>Copyright 1991-1995 Stichting Mathematish Centrum, Amsterdam
<br>>>> <span class=keyword>print</span> 1 + 1
<br>2
<br></span></p>

<p>
이 예제의 첫 번째 줄은 파이썬 인터프리터를 기동시키는 명령어입니다. 다음의 두 줄은 파이썬이 보낸 메시지입니다. 세 번째 줄은 <span class=code>>>></span>로 시작하는데, 이것은 파이썬이 사용하는 프롬프트로서 준비가 되었다는 것을 나타냅니다. <span class=code><span class=keyword>print</span> 1 + 1</span>을 타자하면, 파이썬은 <span class=code>2</span>라고 응답합니다.</p>
<p>
다른 방법으로, 프로그램을 파일에 작성하고 파이썬을 사용하여 그 파일의 내용을 실행할 수 있습니다. 그러한 파일을 스크립트(<b>script</b>)라고 부릅니다. 예를 들어, <span class=code>latoya.py</span>라는 이름의 파일에 텍스트 편집기를 사용하여 다음의 내용을 입력합니다:</p>


<p><span class=code><span class=keyword>print</span> 1 + 1
<br></span></p>



<p>
관례적으로, 파이썬 프로그램을 담고 있는 파일은 이름이 <span class=code>.py</span>로 끝납니다.</p>
<p>
프로그램을 실행하려면 파이썬에게 스크립트의 이름을 말해줄 필요가 있습니다:</p>


<p><span class=code>$ python latoya.py
<br>2
<br></span></p>

<p>
다른 개발 환경에서는, 프로그램을 실행시키기 위한 세부사항들이 다를 수 있습니다. 또, 대부분의 프로그램들은 이 프로그램보다는 더 재미있습니다.</p>
<p>
이 책에 있는 예제들은 대부분 명령어 줄에서 실행됩니다. 명령어 줄에서 작업하는 것이 프로그램 개발과 테스트에 편리한데, 왜냐하면 프로그램을 타자하고 그 즉시 실행시켜 볼 수 있기 때문입니다. 잘 작동하는 프로그램이 완성되면, 그것을 스크립트로 저장해야만 앞으로 실행시킬 수 있고 수정할 수 있습니다.</p>

<a name=2></a><br>
<h3>1.2 프로그램이란 무엇인가?</h3>

<p>프로그램(<b>program</b>)은 일련의 지령어로써 계산을 수행하는 법을 지정합니다. 계산은 수학적인 것과 같은 어떤 것이어서, 방정식 시스템의 해를 구하거나 또는 폴리노미얼의 근을 구하는 것일 수도 있겠지만, 그것은 또한 상징적 계산일 수도 있어서, 문서에서 텍스틀 찾고 바꾸던가 혹은 (이상하게 보이겠지만) 프로그램을 컴파일 하는 것과 같은 것일 수도 있습니다.</p>
<p>
세부적인 것은 언어에 따라 다르지만, 거의 모든 언어에서 나타나는 기본적인 지령어들이 있습니다:</p>

<dl>

<dt>입력(input)</dt>
<dd>키보드, 파일, 또는 어떤 다른 장치로부터 데이타를 얻는다.</dd>

<dt>출력(output)</dt>
<dd>데이타를 화면에 보여 주거나 데이타를 파일 또는 다른 장치에 보낸다.</dd>

<dt>수학(math)</dt>
<dd>덧셈과 곱셈같은 기본적인 수학적 연산을 수행한다.</dd>

<dt>조건적 실행(conditional execution)</dt>
<dd>특정 조건을 점검하여 적절한 일련의 서술문을 수행한다.</dd>

<dt>반복(repetition)</dt>
<dd>보통은 약간의 변화를 동반하면서, 어떤 행위를 반복적으로 수행한다.</dd>

</dl>

<p>
믿든 안 믿든, 이것이 거의 모든 것입니다. 여러분이 사용해본 모든 프로그램은 얼마나 복잡한가에 상관없이 대체로 이러한 것들과 같은 지령어들로 이루어져 있습니다. 그러므로, 프로그래밍을 이러한 기본적인 지령어들 중의 하나로 수행될 수 있을 정도로 충분히 간단하게 될 때까지 거대하고 복잡한 작업을 작고 더 작은 하부작업들로 쪼개는 과정이라고 기술할 수 있습니다.</p>
<p>
개념이 약간 모호할 수도 있지만, 알고리즘(<b>algorithms</b>)을 논의할 때 이 주제로 다시 돌아오겠습니다.</p>

<a name=3></a><br>
<h3>1.3 디버깅이란 무엇인가?</h3>
<p>
프로그래밍은 복잡한 처리과정입니다. 그리고 사람이 만들기 때문에 자주 에러가 일어납니다. 프로그래밍에서는 이를 버그(<b>bugs</b>)라고 부르며 버그를 추적해 들어가서 교정하는 처리과정을 디버깅(<b>debugging</b>)이라고 부릅니다.</p>
<p>
세 종류의 에러가 프로그램에서 일어날 수 있습니다: 구문 에러와 실행시간 에러 그리고 의미구조 에러가 그것입니다. 에러를 더 빨리 추적해 들어가기 위해서는 그것들을 구별하는 것이 좋습니다.</p>

<h4>구문 에러(Syntax errors)</h4>
<p>
파이썬은 프로그램이 구문적으로 정확할 때만 프로그램을 실행할 수 있습니다; 그렇지 않으면, 처리는 실패하고 에러 메시지를 돌려 줍니다. 구문(<b>Syntax</b>)은 프로그램의 구조와 그 구조에 대한 규칙들을 가르킵니다. 예를 들어, 영어에서 한 문장은 대문자로 시작해야 하며 마침표(period)로 끝나야 합니다. 한국어에서 한음절은 초성과 중성으로 이루어지거나 또는 초성과 중성 그리고 종성으로 이루어집니다.<P> (this sentence contains a <b>syntax error</b>.)<BR>(ㅇ ㅣ 문장은 <B>구문에러</B>를 포함합니다.) <P> 이런 문장이 그러한 구문에러(<b>syntax error</b>)(This->this)(이->ㅇ ㅣ)를 포함합니다.
</p>
<p>
대부분의 독자들에게 약간의 구문 에러정도는 중요한 문제가 안 됩니다. 이 때문에 에러 메시지를 토하지 않고서도 제멋대로의 운율이 붙은 시를 읽을 수가 있습니다. 파이썬은 그렇게 관대하지 않습니다. 만약에 프로그램에 단 하나의 구문 에러라도 있으면, 파이썬은 에러 메시지를 출력하고 종료할 것입니다. 그리고 프로그램을 실행할 수 없을 것입니다. 프로그래밍을 처음 시작하고 몇 주 동안은 아마도 구문에러를 추적하는 데에 많은 시간을 소비하겠지만, 점차 경력이 쌓여감에 따라 에러는 점차 줄어들고 더 빨리 찾게 될 것입니다.</p>

<h4>실행시간 에러(Runtime errors)</h4>
<p>
두 번째 종류의 에러는 실행시간 에러입니다. 프로그램을 실행시켜 보아야만 에러가 나타나기 때문에 그렇게 부릅니다. 이 에러는 보통 무엇인가 예외적인 (나쁜) 일이 일어났다는 것을 뜻하므로 예외(<b>exceptions</b>)라고도 부릅니다.</p>
<p>
실행시간 에러는 앞으로 보게 될 전반부 몇 장에서와 같이 간단한 예제에서는 매우 드뭅니다. 그래서 어느정도 시간이 지나야만 실행시간 에러를 만나게 될 것입니다.</p>

<h4>의미구조 에러 (Semantic errors)</h4>
<p>
세 번째 종류의 에러는 의미구조 에러(<b>semantic error</b>)입니다. 만약 프로그램에 의미구조 에러가 있다고 할지라도, 프로그램은 성공적으로 수행됩니다. 컴퓨터가 어떠한 에러 메시지도 만들어 내지 않을 것이라는 의미에서는 말입니다. 그러나 그 프로그램은 올바른 일을 하지는 않을 것입니다. 프로그램은 다른 어떤 것을 수행할 것입니다. 꼭 집어 말하면, 그 프로그램은 여러분이 명령한 바를 그대로 수행할 것입니다.</p>
<p>
문제는 그 프로그램이 작성하기를 원했던 그 프로그램이 아니라는 것입니다. 그 프로그램의 의도 (그의 의미구조)는 잘못된 것입니다. 의미구조 에러를 구별해 내는 것은 꼼수적일 수 있습니다. 왜냐하면 거꾸로 작업을 돌려서 프로그램의 출력을 살펴보고 무엇이 진행되고 있는지 알아보아야 하기 때문입니다.</p>

<h4>경험적 디버깅(Experimental debugging)</h4>
<p>
앞으로 익히게 될 가장 중요한 기술중의 하나는 디버깅입니다. 좌절감을 맛볼 수도 있겠지만, 디버깅은 프로그래밍중에서 가장 지적으로 풍부하고 도전적이며 재미있습니다.</p>
<p>
어떤 면에서, 디버깅은 탐정의 작업과도 같습니다. 실마리와 마주합니다. 그리고 결과로 이끈 사건들과 과정들에 대해서 추론해야 합니다.</p>
<p>
디버깅은 마치 경험과학과 비슷합니다. 무엇이 잘못되고 있는지 알기만 한다면, 프로그램을 수정하고 다시 시도해 봅니다. 만약 세운 가설이 옳다면, 수정한 결과를 예측할 수 있습니다. 그리고 잘 작동하는 프로그램으로 한 발자국 더 가까이 다가갑니다. 만약 가설이 틀리다면, 새로운 가설을 세워야 합니다. 셜록 홈즈(Sherlock Holmes)는 다음과 같이 지적했습니다. "당신이 불가능한 것을 제거했다면, 무엇이 남든지, 비록 그럴듯 해 보이지 않을지라도, 반드시 참이다." (A. Conan Doyle, <i>The Sign of Four</i>)</p>
<p>
어떤 사람들에게는 프로그래밍과 디버깅이 같습니다. 다시 말하면, 프로그래밍은 원하는 작동을 할 때까지 점진적으로 프로그램을 디버깅하는 과정입니다. 그 아이디어는  <i>무언가</i>를 하는 프로그램으로 시작해서 작은 변경을 가하며 상황에 따라 수정된 것들을 디버깅하고 그리하여 항상 작동하는 프로그램을 가지게 된다는 것입니다.</p>

<p>
예를 들어, 리눅스는 수 천 줄로 구성된 운영체제이지만, 리누스 토발즈가 인텔 80386칩에서 실험하곤 했던 단순한 프로그램으로부터  시작되었습니다. 래리그린필드씨는 다음과 같이 지적했습니다, "리누스의 초기 프로젝트의 하나는 AAAA와 BBBB사이를 프린트하고자 하는 것이었는데, 이것이 후에 리눅스로 진화하였다."  <i>The Linux Users' Guide</i> Beta Version 1).</p>
<p>
앞으로 디버깅과  다른 프로그래밍 관행에 관하여 더 많은 제안을 하겠습니다.</p>

<a name=4></a><br>
<h3>1.4 형식언어와 자연언어</h3>
<p>
<b>자연어</b>는 사람들이 말하는 영어나 스페인어 그리고 프랑스어 같은 언어입니다. (사람들이 자연어에 대해 어떤 질서와 규칙을 부여하려고 노력할지라도) 자연어는 사람들에 의하여 디자인되지 않았습니다; 자연어는 자연적으로 진화하였습니다.</p>

<p><b>형식언어</b>는 특별한 어플리케이션을 위하여 사람들에 의하여 디자인됩니다. 예를 들어 수학에서 사용하는 표기법은 수와 상징들 사이의 명확한 관계설정에 특히나 좋은 형식언어입니다. 화학자들은 분자의 화학구조를 나타내기 위하여 형식언어를 사용합니다. 그리고 무엇보다도 중요하게도:</p>

<p style="margin-left: 30px; margin-right: 30px;"> <b>
프로그래밍 언어는 계산을 표현하기 위하여 디자인된 형식언어입니다.</b> </p>

<p>
형식언어는 구문에 관하여 엄격한 규칙을 갖는 경향이 있습니다. 예를 들어,  <tt>3+3=6</tt>은 구문적으로 정확한 수학적 문장이지만, <tt>3=+6$</tt>는 그렇지 않습니다.  또한, <tt>H<sub>2</sub>O</tt>는 구문적으로 정확한 화학적 이름이지만, <tt><sub>2</sub>Zz</tt>는 그렇지 않습니다.</p>

<p>구문규칙은 토큰과 구조라는 두 가지 관점에서 바라볼 수 있습니다.  토큰은 언어의 기본적 요소로서, 마치 단어와 숫자들, 화학적 요소들과 같은 것입니다. <span class=code>3=+6$</span>와 관련된 문제들중의 하나는  <span class=code>$</span>가 수학에서 사용하는 적법한 토큰이 아니라는 것입니다. 비슷하게, (적어도 내가 아는 바로는) <tt><sub>2</sub>Zz</tt>는 적법하지 않습니다. 왜냐하면 약자<tt>Zz</tt>에 해당하는 어떤 원소도 없기 때문입니다.</p>

<p>구문에러의 두 번째 형태는 문장의 구조에 관한 것입니다; 즉, 토큰들이 정렬되는 방법에 관한 것입니다. <span class=code>3=+6$</span>이라는 구문은 구조적으로 적법하지 않습니다. 왜냐하면 등호기호 다음에 바로 플러스 표시가 올 수 없기 때문입니다. 비슷하게, 분자식은 원소 앞이 아니라 원소 뒤에 첨자가 와야만 합니다.</p>

<p style="margin-left: 30px; margin-right: 30px;"> <i>연습삼아, 구조화는 잘 되었으나 인식은 불가능한 토큰으로 이루어진 문장을 작성해 보세요. 그리고 유효한 토큰으로 이루어졌으나, 구조가 적절하지 않은 다른 문장 하나를 써 보세요.</i> </p>

<p>
영어 문장 혹은 형식언어로 된 서술문을 읽을 때, (자연어라면 무의식적으로 판단하겠지만) 문장의 구조가 어떤가를 판단해야만 합니다. 이러한 처리과정을 해석(<b>parsing</b>)이라고 부릅니다.</p>
<p>
예를 들어, "다른 쪽 구두가 떨어졌어"라는 문장을 들었을때, "다른 쪽 구두"를 주어로 "떨어졌어"를 술어로 이해합니다. 한 문장을 분해하자 마자 그것이 무엇을 뜻하는 가를, 즉 그 문장의 의미를 알 수 있습니다. 신발이 무엇인지 그리고 떨어진다는 것이 무엇인지를 알기 때문에, 이 문장에 내포된 일반적 의미를 이해하게 될 것입니다.</p>

<p>
형식언어와 자연어는 비록 많은 공통점 --- 토큰, 구조, 구문, 의미 -- 이 있긴 하지만, 많은 차이점이 있습니다.</p>



<dl>

<dt>모호성</dt>
<dd>자연어는 모호함으로 가득 차 있으며, 사람들은 그때 상황에 따른 단서와 다른 정보들을 이용하여 자연어를 사용한다. 형식언어는 거의 혹은 완벽하게 명료하게 디자인 되었는데, 이것은 곧 상황에 관계없이 하나의 서술은 정확히 하나의 의미를 가진다는 것을 뜻한다.</dd>

<dt>관대성</dt>
<dd> 모호성을 보충하고, 오해를 줄이기 위해서, 자연어는 많은 관대성을 채용했다. 결과적으로 자연어는 때때로 말이 많이 필요하다. 형식언어는 덜 관대하며 더 간결하다.</dd>

<dt>문자화</dt>
<dd> 자연어는 숙어와 은유로 가득하다. 내가 만약 "다른 신발이 떨어졌어"라고 이야기한다고 할지라도 거기에는 아무 신발도 없으며, <span title="역주: 일반적으로 구두는 한 켤레가 동시에 떨어져야 한다. 한 쪽은 이미 떨어지는 소리가 났고, 나머지 다른 쪽 구두도 떨어지는 소리가 나야 한다. 그 소리를 기다리고 기다리다 드디어 다른 쪽 구두가 떨어졌으니 '드디어 결말이 났음'을 의미한다.">아무것도 떨어지고 있지 않을 수 있다</span>. 형식언어는 그 언어가 뜻하는 바 정확히 그것을 의미한다.</dd>

</dl>
<p> 
자연어로 이야기하면서 성장해온 --우리 모든-- 인간들은 형식언어에 적응하는 데에 때때로 곤란을 느낍니다. 어떤 면에서 형식언어와 자연어의 차이는 시와 운문 사이의 차이와 비슷하지만, 더 큰 차이가 있습니다:</p>



<dl>

<dt>시</dt>
<dd> 단어들은 그 의미뿐만 아니라 소리를 위해서도 사용된다. 그리고 전체 시가 함께 감동, 즉 정서적 반응을 일으킨다. 모호성은 일반적일 뿐만 아니라 때로는 고의적이기도 하다.</dd>

<dt>운문</dt>
<dd> 단어들의 문자적 의미가 더욱 중요하며, 구조가 더욱 의미를 드러낸다. 운문은 시보다는 분석하기에  좋지만, 여전히 모호하다.
</dd>

<dt>프로그램</dt>
<dd> 컴퓨터 프로그램의 의미는 명료하며 문자 그대로이다. 그리고 토큰과 구조를 분석함으로써 전체적으로 이해할 수도 있다.</dd>

</dl>

<p>
여기에서 프로그램(다른 형식언어들)을 읽는 데에 제안을 하고자 합니다. 첫째로, 형식언어는 자연어보다 보다 농밀합니다. 그렇기 때문에 그것을 읽는데에 더욱 시간이 걸린다는 사실을 기억하세요. 또한, 구조가 대단히 중요합니다. 그래서 위에서 아래로, 왼쪽에서 오른쪽으로 읽는 것은 보통 좋은 생각이 아닙니다. 대신에, 토큰을 정의하고 구조를 이해하여 프로그램을 분석하는 법을 배우세요. 마지막으로, 세부적인 것이 중요하다는 사실을 기억하세요. 철자 에러라든가 잘못된 구두점과 같이 여러분의 자연어에서는 처리 가능한, 사소한 일이 형식언어에서는 엄청난 차이를 만들어 낼 수 있습니다.</p>

<a name=5></a><br>
<h3>1.5 첫 번째 프로그램</h3>
<p>
전통적으로, 새로운 언어로 작성되는 첫 번째 프로그램은 "Hello, World!"라고 부릅니다. 왜냐하면 그 프로그램이 하는 일은 "Hello, World!"라는 단어들을 화면에 출력하는 것이 모두이기 때문입니다. 파이썬으로는 다음과 같이 보입니다:</p>


<p><span class=code><span class=keyword>print</span> <span class=quote>"Hello, World!"</span>
<br></span></p>

<p>
이것은 print 서술문(<b>print statement</b>)의 한 예로서, 실제로는 종이에 아무 것도 찍지 않습니다.  화면에 하나의 값을 보여주며 이 경우 그 결과는 두 단어입니다.</p>


<p><span class=code>Hello, World!
<br></span></p>


<p>
프로그램에 있는 인용 부호는 그 값의 처음과 끝을 표식합니다; 인용부호는 그 결과에 나타나지 않습니다.</p>
<p>
어떤 사람들은 "Hello, World!" 프로그램의 단순함을 가지고 프로그래밍 언어의 질을 평가하기도 합니다. 이 기준으로라면, 파이썬은 거의 단순할 수 있을 만큼 단순합니다.</p>

<a name=6></a><br>
<h3>1.6 용어 해설</h3>

<dl>

<dt>문제 해결(problem solving)</dt>
<dd>문제를 형성하고 해를 찾아서 그 해답을 표현하는 처리과정.</dd>

<dt>고-수준 언어(high-level language)</dt>
<dd>파이썬과 같이 인간이 쉽게 쓰고 읽을 수 있도록 디자인된 프로그래밍 언어.</dd>

<dt>저-수준 언어(low-level language)</dt>
<dd>컴퓨터가 쉽게 실행할 수 있도록 디자인된 프로그래밍 언어; "기계어(machine language)" 또는 "어셈블리 어(assembly language)"라고도 불린다.</dd>

<dt>이식성(portability)</dt>
<dd>한 종류 이상의 컴퓨터에서 실행될 수 있는 프로그램의 성질.</dd>

<dt>통역(interpret)</dt>
<dd>한 번에 한 줄씩 번역함으로써 고-수준 언어로 된 프로그램을 실행하는 것.</dd>

<dt>컴파일(compile)</dt>
<dd>고-수준 언어로 작성된 프로그램을, 나중에 실행하기 위해 저-수준 언어로 한 번에 모두 번역하는 것.</dd>

<dt>소스 코드(source code)</dt>
<dd>컴파일되기 전의 고-수준 언어로 된 프로그램.</dd>

<dt>오브젝트 코드(object code)</dt>
<dd>프로그램을 번역한 후에 컴파일러가 출력한 것.</dd>

<dt>실행가능 코드(executable)</dt>
<dd>실행할 준비가 된 오브젝트 코드의 또 다른 이름.</dd>

<dt>스크립트(script)</dt>
<dd>파일에 저장되어 있는 프로그램 (보통은 통역(interpret)될 것이다).</dd>

<dt>프로그램(program)</dt>
<dd>계산을 지정하는 한 모둠의 지령어들.</dd>

<dt>알고리즘(algorithm)</dt>
<dd>한 범주의 문제들을 해결하는 일반적인 처리과정.</dd>

<dt>버그(bug)</dt>
<dd>프로그램에 있는 에러.</dd>

<dt>디버깅(debugging)</dt>
<dd>세 종류의 프로그래밍 에러에 포함되는 모든 것을 찾아서 제거하는 처리과정.</dd>

<dt>구문(syntax)</dt>
<dd>프로그램의 구조.</dd>

<dt>구문 에러(syntax error)</dt>
<dd>해석을 불가능하게 하는 프로그램에 있는 에러 (그러므로 통역할 수 없다).</dd>

<dt>실행시간 에러(runtime error)</dt>
<dd>프로그램이 실행되기 시작하기 전까지는 나타나지 않지만, 실행되면 프로그램이 더 이상 진행되지 못하도록 만드는 에러.</dd>

<dt>예외(exception)</dt>
<dd>실행시간 에러의 또 다른 이름.</dd>

<dt>의미구조 에러(semantic error)</dt>
<dd>프로그래머가 의도한 것과 다른 어떤 것을 프로그램이 수행하도록 만드는 에러.</dd>

<dt>의미구조(semantics)</dt>
<dd>프로그램의 의도.</dd>

<dt>자연 언어(natural language)</dt>
<dd>자연스럽게 진화한, 사람들이 말하는 모든 언어.</dd>

<dt>형식 언어(formal language)</dt>
<dd>수학적 아이디어를 표현한다든가 또는 컴퓨터 프로그램같이, 인간들이 특별한 목적으로 고안한 모든 언어; 모든 프로그래밍 언어는 형식 언어이다.</dd>

<dt>토큰(token)</dt>
<dd>프로그램이 가지는 구문 구조의 기본 요소. 자연 언어로는 단어와 유사하다.</dd>

<dt>해석(parse)</dt>
<dd>프로그램을 조사해서 그 구문 구조를 분석하는 것.</dd>

<dt>print 서술문</dt>
<dd>파이썬 인터프리터가 값을 화면에 출력하도록 하는 지령어.</dd>



</dl>
<h2>연습문제</h2>
<ol>
<li><div class="exercise">
의미구조는 맞지만 구문은 올바르지 않게 영어 문장을 작성하시오. 구문은 맞지만 의미구조는 올바르지 않은 문장도 만들어 보시오.
</div></li>

<li><div class="exercise">
파이썬 쉘을 시작하시오. <code>1 + 2</code>를 쓰고 리턴 키를 누르시오. 파이썬은 이 표현식(<em>expression</em>)을 평가(<em>evaluates</em>)해서 그 결과를 인쇄한 다음, 또다른 프롬프트를 인쇄한다. <code>*</code>는 곱셈 연산자(<em>multiplication operator</em>)이고, <code>**</code>는 지수 연산자(<em>exponentiation operator</em>)이다.  다양한 표현식을 입력해 보고 파이썬 인터프리터가 무엇을 인쇄하는지 기록해 보시오. <code>/</code> 연산자를 사용하면 무슨 일이 일어나는가?  결과가 예상대로인가?  설명해 보시오.
</div></li>

<li><div class="exercise">
<code>1 2</code>를 타자하고 리턴키를 치시오. 파이썬은 그 표현식을 평가해 보지만, 그 표현식이 구문적으로 불법적이기 때문에 평가하지 못한다. 대신에, 에러 메시지를 인쇄한다:
<pre class="python-interpreter">
  File "&lt;stdin&gt;", line 1
    1 2
      ^
SyntaxError: invalid syntax
</pre>
많은 경우, 파이썬은 구문 에러가 일어나는 곳을 가리키지만, 언제나 올바른 것은 아니며, 무엇이 잘못 되었는지에 관한 정보를 충분히 알려 주지 않는다. 그래서 대부분의 경우 여러분이 구문 규칙을 제대로 배워서그 부담을 져야 한다.
<br /><br />
이 경우, 파이썬은 숫자 사이에 연산자가 없으므로 불평하고 있다.
<br /><br />
파이썬 프롬프트에서 입력하면 에러 메시지가 인쇄될 만한 문자열의 예를 세가지 더 작성해 보아라. 왜 각 예제가 유효한 파이썬 구문이 아닌지 설명하라.
</div></li>

<li><div class="exercise">
<code>print 'hello'</code>라고 타자하자. 파이썬은 이 서술문을 실행하고, 그 효과는 h-e-l-l-o 라는 문자가 인쇄되는 것이다. 문자열을 둘러 싸는데 사용되었던 따옴표가 출력에는 없음에 유의하라.
<br /><br />
이제 <code>print '"hello"'</code>라고 타자해 보고 그 결과를 기술하고 설명하라.
</div></li>

<li><div class="exercise">
<code>print cheese</code>라고 따옴표 없이 타자하라. 출력결과는 다음과 같이 보인다:
<pre class="python-interpreter">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name 'cheese' is not defined
</pre>
이는 실행-시간 에러이다; 구체적으로 NameError이며, 더 구체적으로는 <code>cheese</code>라는 이름이 정의되어 있지 않기 때문이다. 아직 무슨 뜻인지 모르겠다면, 곧 알게 될 것이다.
</div></li>

<li><div class="exercise">
파이썬 프롬프트에서 <code>'This is a test...'</code>를 타자하고 엔터키를 눌러라.
무슨 일이 일어나는지 기록하라.  이제 다음과 같은 내용으로 이름이 <code>test1.py</code>인 파이썬 스크립트를 만들자 (실행하기 전에 반드시 저장부터 하자):
<pre class="python">
'This is a test...'
</pre>
이 스크립트를 실행하면 무슨 일이 일어나는가? 이제 그 내용을 다음과 같이 바꾸자:
<pre class="python">
print 'This is a test...'
</pre>
그리고 다시 실행하라.  이 번에는 무슨 일이 일어나는가?
<br /><br />
파이썬 프롬프트에서 표현식(<em>expression</em>)을 타자할 때마다, 평가되고(<em>evaluated</em>) 그 결과는 다음 줄에 인쇄된다.
<code>'This is a test...'</code>는 표현식이고, <code>'This is a test...'</code>로 평가된다 (표현식 <code>42</code>가 <code>42</code>로 평가되는 것과 마찬가지로 말이다). 그렇지만, 스크립트에서는 표현식을 평가하면 프로그램 출력으로 전송되지 않는다. 그래서 명시적으로 인쇄해야 한다.
</div></li>
</ol>

<p>
<hr>
<table width="100%" cellpadding="0" cellspacing="2" border="0">
  <tr>
    <td width="20" class=head><a href="chap02.htm"><img border="0" alt="Next" src="images/next.png"></a></td>
    <td width="20" class=head><a href="index.htm" ><img border="0" alt="Up" src="images/up.png" ></a></td>
    <td width="20" class=head><a href="contrib.htm" ><img border="0" alt="Previous" src="images/prev.png" ></a></td>
    <td width="100%" class=headcenter><img border="0" alt="Hi" src="images/headertitle.png" ></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
    <td width="20" class=head><a href="dex.htm" ><img border="0" alt="Index" src="images/index.png" ></a></td>
    <td width="20" class=head><img border="0" alt="" src="images/blank.png" ></td>
  </tr>
</table>
<hr>
</body></html>